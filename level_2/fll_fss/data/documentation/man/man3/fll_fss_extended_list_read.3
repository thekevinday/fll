.TH fll_fss_extended_list_read "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
fll_fss_extended_list_read
.SH SYNOPSIS
.nf
.B #include <fll/level_2/fss.h>
.sp
\fBf_status_t fll_fss_extended_list_read\fP(
    \fBconst f_string_static_t \fP\fIbuffer\fP,
    \fBf_state_t               \fP\fIstate\fP,
    \fBf_string_range_t *const \fP\fIrange\fP,
    \fBf_fss_objects_t *const  \fP\fIobjects\fP,
    \fBf_fss_contents_t *const \fP\fIcontents\fP,
    \fBf_fss_delimits_t *const \fP\fIobjects_delimits\fP,
    \fBf_fss_delimits_t *const \fP\fIcontents_delimits\fP,
    \fBf_fss_comments_t *const \fP\fIcomments\fP
);
.fi
.SH DESCRIPTION
.PP
This is the fss-0003 implementation. Read a buffer expected to be in fss-0003 format, getting all objects and their respective content.
.PP
This does not utilize recursion and has a max content depth of 1, see fss-0008 (Embedded List) for that purpose.
.SH PARAMETERS
.TP
.B buffer
The buffer to read from.

.TP
.B state
A state for providing flags and handling interrupts during long running operations. There is no state.handle(). There is no "callbacks" structure. There is no data structure passed to these functions.

.TP
.B range
The range within the buffer that is currently being read.

.TP
.B objects
This will be populated with all valid objects found.

.TP
.B contents
This will be populated with all valid contents found.

.TP
.B objects_delimits
An array of delimits for objects detected during processing. The caller is expected to decide if and when to process them.

.TP
.B contents_delimits
(optional) An array of delimits for contents detected during processing. The caller is expected to decide if and when to process them. Set pointer address to 0 and all delimits will instead utilize objects_delimits.

.TP
.B comments
An array of ranges representing where comments are found within any valid content. This only stores comments found within valid content only.

.SH RETURN VALUE
.PP
\fBF_none\fP on success (both valid object and valid content found with start location is at end of content).
.br
\fBF_none_eos\fP on success after reaching the end of the buffer (both valid object and valid content found with start location is at end of buffer).
.br
\fBF_none_stop\fP on success after reaching stopping point (both valid object and valid content found with start location is at stop point).
.br
\fBF_data_not_eol\fP if there is no data to write and EOL was reached.
.br
\fBF_data_not_eos\fP no data to write due start location being greater than or equal to buffer size.
.br
\fBF_data_not_stop\fP no data to write due start location being greater than stop location.
.br
\fBF_fss_found_object_content_not\fP on success and object was found but no content was found (start location is at end of object).
.br
\fBF_number_overflow\fP (with error bit) if the maximum buffer size is reached.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_string_ranges_increase().
.br
Errors (with error bit) from: f_string_rangess_increase().
.br
Errors (with error bit) from: f_uint8s_increase().
.br
Errors (with error bit) from: fl_fss_extended_list_content_read().
.br
Errors (with error bit) from: fl_fss_extended_list_object_read().
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
