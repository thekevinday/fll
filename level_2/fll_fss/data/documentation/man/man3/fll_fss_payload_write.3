.TH fll_fss_payload_write "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
fll_fss_payload_write
.SH SYNOPSIS
.nf
.B #include <fll/level_2/fss/payload.h>
.sp
\fBf_status_t fll_fss_payload_write\fP(
    \fBconst f_string_static_t   \fP\fIobject\fP,
    \fBconst f_string_static_t   \fP\fIcontent\fP,
    \fBconst bool                \fP\fItrim\fP,
    \fBconst f_string_static_t  *\fP\fIcontent_prepend\fP,
    \fBf_state_t                 \fP\fIstate\fP,
    \fBf_string_dynamic_t *const \fP\fIdestination\fP
);
.fi
.SH DESCRIPTION
.PP
Write a single object string and content string to a buffer, using fss-0002 format.
.PP
This processes only the outermost part and specially handles the payload. The inner data, such as the fss-0001 inside of the "header", should be directly processed via the appropriate function.
.PP
If the Object is "payload", then the Content is written directly without prcessing or escaping.
.SH PARAMETERS
.TP
.B object
A string representing the object.

.TP
.B content
A string representing the content.

.TP
.B trim
If TRUE, the Object is passed f_fss_complete_full_trim_e. If FALSE, the Object is passed f_fss_complete_full_e. The Content is always passed f_fss_complete_full_e.

.TP
.B content_prepend
A string to prepend at the start of each line in content, such as spaces. This will not be prepended for the Object "payload". Set the pointer address to 0 to disable.

.TP
.B state
A state for providing flags and handling interrupts during long running operations. There is no state.handle(). There is no "callbacks" structure. There is no data structure passed to these functions.

.TP
.B destination
The buffer to append to.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_none_eos\fP on success after reaching the end of the buffer.
.br
\fBF_none_stop\fP on success after reaching stopping point.
.br
\fBF_data_not_eos\fP no data to write due start location being greater than or equal to buffer size.
.br
\fBF_data_not_stop\fP no data to write due start location being greater than stop location.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_string_dynamic_increase().
.br
Errors (with error bit) from: fl_fss_basic_list_content_write().
.br
Errors (with error bit) from: fl_fss_basic_list_object_write().
.SH SEE ALSO
.PP
.nh
.ad l
\fIfll_fss_payload_read\fP(3), \fIfll_fss_payload_write\fP(3), \fIf_string_dynamic_increase()\fP, \fIfl_fss_basic_list_content_write()\fP, \fIfl_fss_basic_list_object_write()\fP, \fIf_string_dynamic_increase()\fP, \fIfl_fss_basic_list_content_write()\fP, \fIfl_fss_basic_list_object_write()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
