.TH fl_directory_list "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
fl_directory_list
.SH SYNOPSIS
.nf
.B #include <fll/level_1/directory.h>
.sp
\fBf_status_t fl_directory_list\fP(
    \fBconst f_string_static_t                                \fP\fIpath\fP,
    \fBint(*)(const struct dirent *)                          \fP\fIfilter\fP,
    \fBint(*)(const struct dirent **, const struct dirent **) \fP\fIsort\fP,
    \fBconst bool                                             \fP\fIdereference\fP,
    \fBf_directory_listing_t *const                           \fP\fIlisting\fP
);
.fi
.SH DESCRIPTION
.PP
For some given path, print the names of each file and/or directory inside the directory, stored as a directory listing.
.PP
Allows specifying a custom filter and custom sort.
.SH PARAMETERS
.TP
.B path
Filesystem path to the directory.

.TP
.B filter
A filter function of the form: int xxx(const struct direct *). Set to 0 to not use (NULL).

.TP
.B sort
A sort function of the form: int xxx(const struct direct *, const struct direct *). Set to 0 to not use (NULL). There are two pre-made libc functions available for this: alphasort() and versionsort().

.TP
.B dereference
Set to TRUE to dereferenc symlinks (often is what is desired). Set to FALSE to operate on the symlink itself.

.TP
.B listing
Will be populated with the names of all top-level paths found within the given directory.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if source.used or destination.used is 0.
.br
\fBF_directory_empty\fP if directory is empty.
.br
\fBF_directory_descriptor\fP (with error bit) on directory file descriptor error.
.br
\fBF_directory_open\fP (with error bit) on directory open error.
.br
\fBF_directory_stream\fP (with error bit) on directory stream error.
.br
\fBF_directory_supported_not\fP (with error bit) on directory file descriptor not supported.
.br
\fBF_failure\fP (with error bit) if failed to read directory information.
.br
\fBF_file_descriptor_max\fP (with error bit) if max file descriptors is reached.
.br
\fBF_file_open_max\fP (with error bit) too many open files.
.br
\fBF_memory_not\fP (with error bit) on out of memory.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_string_too_large\fP (with error bit) if appended string length is too large to store in the buffer.
.br
Errors (with error bit) from: f_file_stat_at().
.br
Errors (with error bit) from: f_string_dynamics_increase_by().
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
