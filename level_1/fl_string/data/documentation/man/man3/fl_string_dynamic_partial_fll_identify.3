.TH fl_string_dynamic_partial_fll_identify "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
fl_string_dynamic_partial_fll_identify
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
\fBf_status_t fl_string_dynamic_partial_fll_identify\fP(
    \fBconst f_string_static_t \fP\fIbuffer\fP,
    \fBf_string_range_t *const \fP\fIrange\fP,
    \fBf_fll_id_t *const       \fP\fIid\fP
);
.fi
.SH DESCRIPTION
.PP
Identify whether or not the given string represents a single valid FLL Identifier and possibly save the FLL Identifier.
.PP
This will always change the FLL Identifier used and type codes, if a FLL Identifier is provided.
.PP
Whitespace may be before and after the FLL Identifier and will be ignored. NULLs will be ignored. Anything else will result in treating the character as a possible FLL Identifier.
.PP
A valid FLL Identifier must terminate on either whitespace, EOL, or the stop point (length).
.PP
The id.name might not be NULL terminated. An id.name using all 64-bytes will not be NULL terminated.
.PP
If a newline ("\n") is encountered, range->start will be set to 1 byte after the newline.
.SH PARAMETERS
.TP
.B buffer
The string to process.

.TP
.B range
A range within the buffer representing the start and stop locations. The caller must ensure that the stop point does not exceed the buffer size.

.TP
.B id
(optional) The FLL Identifier found. Set to NULL to not use.

.SH RETURN VALUE
.PP
\fBF_data_not\fP if length is 0.
.br
\fBF_data_not_eos\fP on success, but the range.start >= buffer.used.
.br
\fBF_data_not_stop\fP on success, but the range.start > range.stop.
.br
\fBF_found\fP if the buffer does represent a valid FLL Identifier.
.br
\fBF_found_not\fP if the buffer does not represent a valid FLL Identifier.
.br
\fBF_complete_not_utf\fP (with error bit) if a character is an incomplete UTF-8 fragment.
.br
\fBF_maybe\fP (with error bit) if a character could be a whitespace but width is not long enough. (This is only returned for an otherwise valid FLL Identifier.)
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_utf_not\fP (with error bit) if character is an invalid UTF-8 character.
.br
\fBF_parameter\fP (with error bit) from: f_utf_is_combining().
.br
\fBF_parameter\fP (with error bit) from: f_utf_is_whitespace().
.br
\fBF_parameter\fP (with error bit) from: f_utf_is_word().
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
