.TH fl_utf_string_compare "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
fl_utf_string_compare
.SH SYNOPSIS
.nf
.B #include <fll/level_1/utf.h>
.sp
\fBf_status_t fl_utf_string_compare\fP(
    \fBconst f_utf_string_t   \fP\fIstring1\fP,
    \fBconst f_utf_string_t   \fP\fIstring2\fP,
    \fBconst f_array_length_t \fP\fIlength1\fP,
    \fBconst f_array_length_t \fP\fIlength2\fP
);
.fi
.SH DESCRIPTION
.PP
Provides UTF-8 character manipulation and processing capabilities.
.PP
UTF-8 is handled within these functions via padded string characters (f_utf_string_t). Unlike f_string_t, these f_utf_string_t base functions force padding of ASCII or UTF-8 characters. With f_utf_string_t, a 1-byte wide ASCII character is stored as 4 bytes and a 4-byte wide UTF-8 character is stored as 4 bytes.
.PP
This simplifies traversing the strings at the cost of size vs f_string_t.
.PP
Because of the set width, it is generally safe to ignore invalid UTF-8 sequences. Invalid UTF-8 will be generally ignored here, where reasonably possible. Compare two UTF-8 strings, similar to strncmp().
.PP
This does not stop on NULL. NULL characters are ignored.
.SH PARAMETERS
.TP
.B string1
String to compare.

.TP
.B string2
String to compare.

.TP
.B length1
Length of string1.

.TP
.B length2
Length of string2.

.SH RETURN VALUE
.PP
\fBF_equal_to\fP when both strings equal.
.br
\fBF_equal_to_not\fP when both strings do not equal.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
