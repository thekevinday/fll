.TH fl_print_format "3" "July 2023" "FLL - Featureless Linux Library 0.6.8" "Library Functions"
.SH "NAME"
fl_print_format
.SH SYNOPSIS
.nf
.B #include <fll/level_1/print.h>
.sp
\fBf_status_t fl_print_format\fP(
    \fBconst f_string_t \fP\fIstring\fP,
    \fBFILE *const      \fP\fIstream\fP,
    \fB...              \fP\fI\fP
);
.fi
.SH DESCRIPTION
.PP
Provides some standard printing functions not available in a libc.
.PP
Functions provided here are UTF-8 aware. A formatted print function similar to (but not the same as) the c-library fprintf() function.
.PP
This function attempts to operate as closely to how fprintf() operates, however, there are notable differences.
.PP
This formatted print provides replacement variables for specific types of the FLL project, such f_string_static_t. There is support for safe printing where certain control characters or invalid UTF-8 sequences are not directly printed. There is support for color context printing. There is support for more digit base forms than those provided by fprintf() such as base-2 (binary) or base-12 (duodecimal).
.PP
The reserved formatting character is only the '' character, which may be escaped by a second '' character. This '' character designates the start of a format flag sequence which must be ended by another '' or a format character. A '' at the end of the string is considered invalid.
.PP
Each formatting flags is followed by basic flag or base flag and end on a type flag. The basic, base, and type format flags are represented by a discrete set of reserved characters.
.PP
Each basic format flags may be specified in any order but must be specified before the type flag. The order in which basic format flags are processed in regards parameters is a present order irrespective to the order specified. The basic format flags "/", ";", and ":" are examples of this.
.PP
"G": Round and convert to notation of either decimal or exponent.
.PP
The default format is decimal: [-]ddd.ddd.
.PP
The case-sensitivity of above, such as 'e' vs 'E,' does not replace or relate to the case-sensitivity meaning of 'd' or 'D'. Instead, when 'e' is specified 'e' is used (such as such as [-]d.ddde±dd), but when 'E' is specified, then 'E' is used (such as [-]d.dddE±dd).
.PP
Note: Currently the float/double implementation does not support the notation modes except integer (default) or hexidecimal. This is not intended but is simply a result of the temporary use of sprintf() to perform these operations. Once a custom implementation is provided, replacing snprintf(), then this can properly support the notation modes. Therefore, this function is supposed to support notation modes and does not yet do this (/
.PP
This "%$" sequence is used to prevent characters from being interpreted. For example, consider "%de" vs "%d%$e". The first case "%de" is interpretted as a double using the "e" notation. The second case "%d%$e" is interpretted as a double followed by the letter "e".
.PP
For these basic format flags ("/", ";", and ":"), the order is always processed as: 1) static/dynamic string. 2) partial range. 3) ignore at. 4) ignore in.
.PP
hexidecimal: 0x/0X, representing base-16 units.
.PP
When printing digits, using lowercase designates to print alphabetic digits in lowercase and using uppercase designates to print alphabetic digits in uppercase.
.PP
To keep the design simple, this does not support index position variable replacement like fprintf() does (such as '%1$', '%2$', etc..).
.PP
".*", For number-based values, designates that the precision is specified in the parameter (order is: (precision, value), but if *.* is specified, then order is: (width, precision, value)).
.PP
"_": Display digits in Hexidecimal notation.
.PP
"%": Use left-justification.
.PP
"un", "UN": Type is a f_number_unsigned_t digit (which by default is what f_array_length_t is a type of).
.PP
"�": Unknown/Invalid.
.PP
This print function does not use locking, be sure something like flockfile() and funlockfile() are appropriately called.
.SH PARAMETERS
.TP
.B string
The formatted string to process and output. This is a NULL terminated string.

.TP
.B stream
The file stream to output to, including standard streams such as stdout and stderr.

.TP
.B

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_eos\fP (with error bit) on EOS reached.
.br
\fBF_output\fP (with error bit) on failure to print to the output file.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_valid_not\fP (with error bit) on invalid syntax (such as terminating the string on a single '').
.br
Errors (with error bit) from: f_conversion_number_signed_print().
.br
Errors (with error bit) from: f_conversion_number_unsigned_print().
.br
Errors (with error bit) from: f_print_dynamic().
.br
Errors (with error bit) from: f_print_dynamic_raw().
.br
Errors (with error bit) from: f_print_dynamic_safely().
.br
Errors (with error bit) from: f_print_safely().
.br
Errors (with error bit) from: f_print_terminated().
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
