.TH fl_conversion_dynamic_to_unsigned_detect "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
fl_conversion_dynamic_to_unsigned_detect
.SH SYNOPSIS
.nf
.B #include <fll/level_1/conversion.h>
.sp
\fBf_status_t fl_conversion_dynamic_to_unsigned_detect\fP(
    \fBconst fl_conversion_data_t \fP\fIdata\fP,
    \fBconst f_string_static_t    \fP\fIbuffer\fP,
    \fBf_number_unsigned_t *const \fP\fInumber\fP
);
.fi
.SH DESCRIPTION
.PP
Convert a series of positive number characters into an f_number_unsigned_t.
.PP
 This will stop at one of the following: a non-digit.
.br
 This will ignore NULL values.
.br
 This will not process signed statuses (+/-).
.br
 This will detect based types as follows:
   - Hexidecimals begin with either '0x' or '0X'.
   - Duodecimals begin with either '0d' or '0D'.
   - Octals begin with either '0o' or '0O'.
   - Binaries begin with either '0b' or '0B'.
   - Decimal is used for all other cases.
.br
Leading 0's and whitespace are ignored. Whitespace after the first digit is considered invalid.
.PP
This function is similar to strtoull(), but the behavior of error handling and special bases are different. In particular, octals are specified here with '0b' prefix or '0B' prefix instead of the ridiculous '0' prefix. Negative values are reported as such instead of being converted into the unsigned equivalent.
.SH PARAMETERS
.TP
.B data
Conversion data for specifying things such as treating this as a negative number. This auto-detects the base and negative, ignoring the base number and negative flag.

.TP
.B buffer
The string to convert.

.TP
.B number
This will store the value of the converted string. This value is only changed on success.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if string starts with a null (length is 0).
.br
\fBF_base_not\fP (with error bit) if no supported or valid base unit is provided.
.br
\fBF_complete_not_utf\fP (with error bit) if an incomplete UTF-8 fragment is found.
.br
\fBF_number\fP (with error bit) if parameter is not a number.
.br
\fBF_number_decimal\fP (with error bit) if number has a decimal digit.
.br
\fBF_number_negative\fP (with error bit) on negative value.
.br
\fBF_number_positive\fP (with error bit) on positive value (has a +, such as '+1', when only '1' is valid here).
.br
\fBF_number_overflow\fP (with error bit) on integer overflow.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIfl_conversion_dynamic_partial_to_signed\fP(3), \fIfl_conversion_dynamic_partial_to_signed_detect\fP(3), \fIfl_conversion_dynamic_partial_to_unsigned\fP(3), \fIfl_conversion_dynamic_partial_to_unsigned_detect\fP(3), \fIfl_conversion_dynamic_to_signed\fP(3), \fIfl_conversion_dynamic_to_signed_detect\fP(3), \fIfl_conversion_dynamic_to_unsigned\fP(3), \fIfl_conversion_dynamic_to_unsigned_detect\fP(3), \fIstrtoull()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
