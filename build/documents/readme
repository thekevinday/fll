This package provides a _very_ primitive build system using a bash script called generate.sh.

The syntax for generate.sh is:
  generate.sh <command> [options]
  - where command is one of the following: 'build' or 'clean'.
  - No 'install' command is provided, all of the files to install may be found in the build/ directory after the build command is executed.
  - To install, simply copy the files in the build directory to their appropriate destination.

Build Example:
  ./generate.sh build

Install Example:
  cp -vR build/includes/* /usr/include/
  cp -vR build/libaries/shared/* /usr/lib/
  cp -vR build/programs/shared/* /usr/bin/
  cp -vR build/settings/* /etc/
  
If one of the build sub-directories, such as includes, libraries, programs, and settings, is empty or missing after a successful build, then there are no files of that type to install.

Build Tree Structure Example (using the status_code-0.5.0 project):
build/
├── bash
├── includes
│   └── level_3
│       └── status_code.h
├── libraries
│   ├── shared
│   │   ├── libstatus_code.so -> libstatus_code.so.0
│   │   ├── libstatus_code.so.0 -> libstatus_code.so.0.5.0
│   │   └── libstatus_code.so.0.5.0
│   └── static
│       └── libstatus_code.a
├── objects
│   └── status_code.c.o
├── programs
│   ├── shared
│   │   └── status_code
│   └── static
│       └── status_code
└── settings

The FLL project is broken up into 3 diffeent levels: level_0, level_1, and level_2.
A third pseudo-level also exists for common programs built using this project, called level_3.

With an exception of a few projects within level_0, each level should only depend on a project from a lower level.
Therefore, a level_1 project can only depend on level_0 projects and a level_2 project can depend on only level_0 and level_1 projects.

A few projects in level_0 are essentially required by everything and are depended on by virtually all projects, regardless of the level.
These level_0 projects are:
- f_type: provides core typedef, #define, and similar structures for the entire set of FLL projects.
- f_status: provides status codes and other status codes to be used by the entire set of FLL projects.
- f_memory: provides common memory allocation/deallocation to be used by the entire set of FLL projects.
- f_string: provides common string management to be used by the entire set of the FLL projects.
- f_utf: provides common UTF-8 related string management to be used by the entire set of the FLL projects.

The above projects should be installed first, and in the provided order (f_type, then f_status, then f_memory, f_string, and finally f_utf).
No other level_0 project should depend on another and can be installed in any order.

See: data/build/dependencies for specific dependencies of this project.
