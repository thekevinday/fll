Use these files as a starting point to generate a config.h or similar to disable functions in a project.
This is also used for building the stand alone programs.

These files are generated like the following:

# cd fll/

# cd level_0;
# for i in * ; do grep -hor '#ifndef _di_.*\>' $i | sed -e 's|^#ifndef |#define |g' | sort | uniq > ../build/disable/level_0/$i.h ; done

# cd ..

# cd level_1;
# for i in * ; do grep -hor '#ifndef _di_.*\>' $i | sed -e 's|^#ifndef |#define |g' | sort | uniq > ../build/disable/level_1/$i.h ; done

# cd ..

# cd level_2;
# for i in * ; do grep -hor '#ifndef _di_.*\>' $i | sed -e 's|^#ifndef |#define |g' | sort | uniq > ../build/disable/level_2/$i.h ; done

# cd ..

Make sure the parameter checking files do not exist.
# sed -i -e '/_di_level_0_parameter_checking_/d' -e '/_di_level_1_parameter_checking_/d' -e '/_di_level_2_parameter_checking_/d' build/disable/level_?/*.h

Make sure to remove known special cases that are pulled in by the above process but should not exist.
# sed -i -e '/#define _di_libcap_/d' build/disable/level_?/*.h
# sed -i -e '/#define _di_thread_support_/d' build/disable/level_?/*.h

Use these files to construct a list of all defines to potentially disable based on the "dependencies" of a given project.
Consider the following example using the fake dependencies for the stand alone builds.

# echo $(cat level_3/fake/data/build/dependencies)

Which prints:
  # fss-0000 f_type f_status f_memory f_type_array f_string f_utf f_account f_capability f_color f_console f_control_group f_conversion f_directory f_environment f_execute f_file f_fss f_iki f_limit f_path f_pipe f_print f_signal f_thread fl_control_group fl_conversion fl_directory fl_environment fl_execute fl_fss fl_iki fl_print fl_string fll_error fll_execute fll_file fll_fss fll_path fll_print fll_program

From this list, build the level_0:

# for i in f_type f_status f_memory f_type_array f_string f_utf f_account f_capability f_color f_console f_control_group f_conversion f_directory f_environment f_execute f_file f_fss f_iki f_limit f_path f_pipe f_print f_signal f_thread; do if [[ -f build/disable/level_0/$i.h ]] ; then echo >> build/stand_alone/fake.config.h && cat build/disable/level_0/$i.h >> build/stand_alone/fake.config.h ; fi ; done

From the list, build the level_1:

# for i in fl_control_group fl_conversion fl_directory fl_environment fl_execute fl_fss fl_iki fl_print fl_string ; do if [[ -f build/disable/level_1/$i.h ]] ; then echo >> build/stand_alone/fake.config.h && cat build/disable/level_1/$i.h >> build/stand_alone/fake.config.h ; fi ; done

From the list, build the level_2:

# for i in fll_error fll_execute fll_file fll_fss fll_path fll_print fll_program ; do if [[ -f build/disable/level_2/$i.h ]] ; then echo >> build/stand_alone/fake.config.h && cat build/disable/level_2/$i.h >> build/stand_alone/fake.config.h ; fi ; done

Then compile the stand alone build and comment out each disable causing a compile failure until compilation succeeds.
