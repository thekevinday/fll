.TH f_serialize_from_simple "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_serialize_from_simple
.SH SYNOPSIS
.nf
.B #include <fll/level_0/serialize.h>
.sp
\fBf_status_t f_serialize_from_simple\fP(
    \fBconst f_string_static_t    \fP\fIsource\fP,
    \fBf_string_dynamics_t *const \fP\fIdestination\fP
);
.fi
.SH DESCRIPTION
.PP
Deserialize the entire serialize string into multiple separate strings using the Simple serialize algorithm.
.PP
The simple Serialize algorithm is akin to the PATH environment variable, example: PATH="/bin:/sbin:/usr/bin".
.PP
After processing the above example, there would be strings derived from the following positions: 1) start = 0, stop = 3. 2) start = 5, stop = 9. 3) start = 11, stop = 18.
.SH PARAMETERS
.TP
.B source
A serialized string to deserialize.

.TP
.B destination
An array of strings deserialize from the source string. The individual strings will be NULL terminated after destination.used on success. All deserialized values are appended to the destination.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_complete_not_utf_eos\fP if an incomplete UTF-8 character is found at the end of the source.
.br
\fBF_data_not\fP on success and source.used is 0.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_string_append()
.br
Errors (with error bit) from: f_string_dynamics_increase_by()
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_serialize_from_simple\fP(3), \fIf_serialize_from_simple_get\fP(3), \fIf_serialize_from_simple_range\fP(3), \fIf_serialize_from_simple_select\fP(3), \fIf_serialize_to_simple\fP(3), \fIf_string_append()\fP, \fIf_string_dynamics_increase_by()\fP, \fIf_string_append()\fP, \fIf_string_dynamics_increase_by()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
