.TH f_int64s_increase "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_int64s_increase
.SH SYNOPSIS
.nf
.B #include <fll/level_0/type_array.h>
.sp
\fBf_status_t f_int64s_increase\fP(
    \fBconst f_array_length_t \fP\fIstep\fP,
    \fBf_int64s_t            *\fP\fIint64s\fP
);
.fi
.SH DESCRIPTION
.PP
Increase the size of the int64s array, but only if necesary.
.PP
If the given length is too large for the buffer, then attempt to set max buffer size (F_array_length_t_size_d). If already set to the maximum buffer size, then the resize will fail.
.SH PARAMETERS
.TP
.B step
The allocation step to use. Must be greater than 0.

.TP
.B int64s
The int64s array to resize.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP on success, but there is no reason to increase size (used + 1 <= size).
.br
\fBF_array_too_large\fP (with error bit) if the new array length is too large.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_memory_resize().
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_int64s_adjust\fP(3), \fIf_int64s_append\fP(3), \fIf_int64s_append_all\fP(3), \fIf_int64s_decimate_by\fP(3), \fIf_int64s_decrease_by\fP(3), \fIf_int64s_increase\fP(3), \fIf_int64s_increase_by\fP(3), \fIf_int64s_resize\fP(3), \fIf_int64ss_adjust\fP(3), \fIf_int64ss_append\fP(3), \fIf_int64ss_append_all\fP(3), \fIf_int64ss_decimate_by\fP(3), \fIf_int64ss_decrease_by\fP(3), \fIf_int64ss_increase\fP(3), \fIf_int64ss_increase_by\fP(3), \fIf_int64ss_resize\fP(3), \fIf_memory_resize()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
