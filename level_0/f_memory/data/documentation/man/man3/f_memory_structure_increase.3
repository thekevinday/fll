.TH f_memory_structure_increase "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
f_memory_structure_increase
.SH SYNOPSIS
.nf
.B #include <structure.h>
.sp
\fBf_status_t f_memory_structure_increase\fP(
    \fBconst f_array_length_t  \fP\fIstep\fP,
    \fBconst size_t            \fP\fItype_size\fP,
    \fBvoid **const            \fP\fIstructure\fP,
    \fBf_array_length_t *const \fP\fIused\fP,
    \fBf_array_length_t *const \fP\fIsize\fP
);
.fi
.SH DESCRIPTION
.PP
Increase the size of the structure, but only if necessary.
.PP
If the given length is too large for the buffer, then attempt to set max buffer size (F_array_length_t_size_d). If already set to the maximum buffer size, then the resize will fail.
.SH PARAMETERS
.TP
.B step
The allocation step to use. Must be greater than 0.

.TP
.B type_size
The size of the structure type (such as: sizeof(structure_size)). Must be greater than 0.

.TP
.B structure
The structure to delete.

.TP
.B used
The amount of data used by the structure.

.TP
.B size
The amount of data allocated to the structure.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP on success, but there is no reason to increase size (used + 1 <= size).
.br
\fBF_array_too_large\fP (with error bit) if the new array length is too large.
.br
\fBF_memory_not\fP (with error bit) on allocation error.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
