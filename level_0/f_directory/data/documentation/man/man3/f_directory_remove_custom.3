.TH f_directory_remove_custom "3" "July 2023" "FLL - Featureless Linux Library 0.6.7" "Library Functions"
.SH "NAME"
f_directory_remove_custom
.SH SYNOPSIS
.nf
.B #include <fll/level_0/directory.h>
.sp
\fBf_status_t f_directory_remove_custom\fP(
    \fBconst f_string_static_t                                      \fP\fIpath\fP,
    \fBconst int                                                    \fP\fIdepth_max\fP,
    \fBconst bool                                                   \fP\fIpreserve\fP,
    \fBint(*)(const char *, const struct stat *, int, struct FTW *) \fP\fIcustom\fP
);
.fi
.SH DESCRIPTION
.PP
Remove a directory and possibly its contents.
.SH PARAMETERS
.TP
.B path
The file path to the directory.

.TP
.B depth_max
Represents the max recursion depth, set to 0 to disable recursive delete.

.TP
.B preserve
When depth_max > 0, this designates whether or not to preserve the directory at path. If TRUE, then only the content within the directory is deleted. If FALSE, then the directory at path and its content are deleted. When depth_max is 0, then this should only be FALSE (setting this to TRUE would be a no-op).

.TP
.B custom
A custom function to pass to nftw() instead of using the internal one. Such as a custom function for verbose printing of removed files.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if path.used is 0.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_busy\fP (with error bit) if file is busy.
.br
\fBF_directory_not\fP (with error bit) if a supposed directory in path is not actually a directory.
.br
\fBF_directory_empty_not\fP (with error bit) if the directory is not empty.
.br
\fBF_file_descriptor_max\fP (with error bit) if max file descriptors is reached.
.br
\fBF_file_found_not\fP (with error bit) if file not found.
.br
\fBF_file_open_max\fP (with error bit) too many open files.
.br
\fBF_file_type_directory\fP (with error bit) file is a directory (directories cannot be removed via this function).
.br
\fBF_input_output\fP (with error bit) if an I/O error occurred.
.br
\fBF_loop\fP (with error bit) on loop error.
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_name\fP (with error bit) on path name error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_prohibited\fP (with error bit) if file system does not allow for removing.
.br
\fBF_read_only\fP (with error bit) if file is read-only.
.br
\fBF_failure\fP (with error bit) for any other error.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
