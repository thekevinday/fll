.TH f_string_quantitys_increase_by "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_string_quantitys_increase_by
.SH SYNOPSIS
.nf
.B #include <fll/level_0/string.h>
.sp
\fBf_status_t f_string_quantitys_increase_by\fP(
    \fBconst f_array_length_t      \fP\fIamount\fP,
    \fBf_string_quantitys_t *const \fP\fIquantitys\fP
);
.fi
.SH DESCRIPTION
.PP
Resize the string quantitys array to a larger size.
.PP
This will resize making the string larger based on the given length. If the given length is too large for the buffer, then attempt to set max buffer size (F_array_length_t_size_d). If already set to the maximum buffer size, then the resize will fail.
.SH PARAMETERS
.TP
.B amount
A positive number representing how much to increase the size by.

.TP
.B quantitys
The string quantitys array to resize.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_array_too_large\fP (with error bit) if the new array length is too large.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_memory_resize().
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_string_quantitys_adjust\fP(3), \fIf_string_quantitys_append\fP(3), \fIf_string_quantitys_append_all\fP(3), \fIf_string_quantitys_decimate_by\fP(3), \fIf_string_quantitys_decrease_by\fP(3), \fIf_string_quantitys_increase\fP(3), \fIf_string_quantitys_increase_by\fP(3), \fIf_string_quantitys_resize\fP(3), \fIf_string_quantityss_adjust\fP(3), \fIf_string_quantityss_append\fP(3), \fIf_string_quantityss_append_all\fP(3), \fIf_string_quantityss_decimate_by\fP(3), \fIf_string_quantityss_decrease_by\fP(3), \fIf_string_quantityss_increase\fP(3), \fIf_string_quantityss_increase_by\fP(3), \fIf_string_quantityss_resize\fP(3), \fIf_memory_resize()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
