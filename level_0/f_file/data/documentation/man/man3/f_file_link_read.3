.TH f_file_link_read "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
f_file_link_read
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_link_read\fP(
    \fBconst f_string_static_t   \fP\fIpath\fP,
    \fBconst bool                \fP\fIdereference\fP,
    \fBf_string_dynamic_t *const \fP\fItarget\fP
);
.fi
.SH DESCRIPTION
.PP
Get the target a given link points to.
.PP
This does not require access on the file itself. This only requires access via the parent directories in the path.
.SH PARAMETERS
.TP
.B path
The path file name.

.TP
.B dereference
Set to TRUE to dereference symlinks. Set to FALSE to operate on the symlink itself.

.TP
.B target
Will be replaced with the path in which the link points to. Will be NULL terminated with the NULL at target.string[target.used];

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if path.used is 0.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_buffer\fP (with error bit) if the buffer is invalid.
.br
\fBF_directory_not\fP (with error bit) if a supposed directory in path is not actually a directory.
.br
\fBF_file_found_not\fP (with error bit) if the file at path was not found.
.br
\fBF_input_output\fP (with error bit) on I/O error.
.br
\fBF_loop\fP (with error bit) on loop error.
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_name\fP (with error bit) on path name error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_string_too_large\fP (with error bit) if link target path is too large for string buffer size.
.br
\fBF_failure\fP (with error bit) for any other error.
.br
Errors (with error bit) from: f_string_dynamic_increase_by() Errors (with error bit) from: f_string_dynamic_terminate_after()
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
