.TH f_file_rename "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_file_rename
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_rename\fP(
    \fBconst f_string_static_t \fP\fIsource\fP,
    \fBconst f_string_static_t \fP\fIdestination\fP
);
.fi
.SH DESCRIPTION
.PP
Rename a file.
.PP
The paths must not contain NULL except for the terminating NULL. The paths must be NULL terminated.
.PP
This essentially renames a file but can also change the file's path, which is identical to a move. However, renames only work within a file system and cannot be moved to another file system.
.PP
If destination already exists, then according to rename(), destination will be atomically replaced. Which, if destination is a directory, then that directory must either not exist or be empty.
.SH PARAMETERS
.TP
.B source
The path to the file to copy from.

.TP
.B destination
The path to copy to.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_buffer\fP (with error bit) if the buffer is invalid.
.br
\fBF_busy\fP (with error bit) if file system is too busy to perform write.
.br
\fBF_directory_not\fP (with error bit) if a supposed directory in path is not actually a directory.
.br
\fBF_directory_empty_not\fP (with error bit) if the destination is a non-empty directory.
.br
\fBF_file_found_not\fP (with error bit) if file at path was not found.
.br
\fBF_file_type_directory\fP (with error bit) if destination is a directory but source is not.
.br
\fBF_filesystem_quota_block\fP (with error bit) if file system's disk blocks or inodes are exhausted.
.br
\fBF_link\fP (with error bit) if source or destination has the maxiumum associated links.
.br
\fBF_loop\fP (with error bit) on loop error.
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_mount\fP (with error bit) if source and destination are not within the same mounted filesystems.
.br
\fBF_name\fP (with error bit) on path name error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_prohibited\fP (with error bit) if file system does not allow for making changes.
.br
\fBF_read_only\fP (with error bit) if file is read-only.
.br
\fBF_space_not\fP (with error bit) if file system is out of space (or file system quota is reached).
.br
\fBF_failure\fP (with error bit) for any other error.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_file_access\fP(3), \fIf_file_access_at\fP(3), \fIf_file_clone\fP(3), \fIf_file_close\fP(3), \fIf_file_close_flush\fP(3), \fIf_file_copy\fP(3), \fIf_file_create\fP(3), \fIf_file_create_at\fP(3), \fIf_file_create_device\fP(3), \fIf_file_create_device_at\fP(3), \fIf_file_create_fifo\fP(3), \fIf_file_create_fifo_at\fP(3), \fIf_file_create_node\fP(3), \fIf_file_create_node_at\fP(3), \fIf_file_descriptor\fP(3), \fIf_file_exists\fP(3), \fIf_file_exists_at\fP(3), \fIf_file_flush\fP(3), \fIf_file_group_read\fP(3), \fIf_file_is\fP(3), \fIf_file_is_at\fP(3), \fIf_file_link\fP(3), \fIf_file_link_at\fP(3), \fIf_file_link_hard\fP(3), \fIf_file_link_hard_at\fP(3), \fIf_file_link_read\fP(3), \fIf_file_link_read_at\fP(3), \fIf_file_mode_determine\fP(3), \fIf_file_mode_from_string\fP(3), \fIf_file_mode_read\fP(3), \fIf_file_mode_read_at\fP(3), \fIf_file_mode_set\fP(3), \fIf_file_mode_set_at\fP(3), \fIf_file_mode_to_mode\fP(3), \fIf_file_name_base\fP(3), \fIf_file_name_directory\fP(3), \fIf_file_open\fP(3), \fIf_file_open_at\fP(3), \fIf_file_owner_read\fP(3), \fIf_file_read\fP(3), \fIf_file_read_block\fP(3), \fIf_file_read_until\fP(3), \fIf_file_remove\fP(3), \fIf_file_remove_at\fP(3), \fIf_file_rename\fP(3), \fIf_file_rename_at\fP(3), \fIf_file_role_change\fP(3), \fIf_file_role_change_at\fP(3), \fIf_file_seek\fP(3), \fIf_file_size\fP(3), \fIf_file_size_at\fP(3), \fIf_file_size_by_id\fP(3), \fIf_file_stat\fP(3), \fIf_file_stat_at\fP(3), \fIf_file_stat_by_id\fP(3), \fIf_file_stream_close\fP(3), \fIf_file_stream_open\fP(3), \fIf_file_stream_open_descriptor\fP(3), \fIf_file_stream_read\fP(3), \fIf_file_stream_read_block\fP(3), \fIf_file_stream_read_until\fP(3), \fIf_file_stream_reopen\fP(3), \fIf_file_stream_write\fP(3), \fIf_file_stream_write_block\fP(3), \fIf_file_stream_write_range\fP(3), \fIf_file_stream_write_until\fP(3), \fIf_file_touch\fP(3), \fIf_file_touch_at\fP(3), \fIf_file_type\fP(3), \fIf_file_type_at\fP(3), \fIf_file_umask_get\fP(3), \fIf_file_umask_set\fP(3), \fIf_file_write\fP(3), \fIf_file_write_block\fP(3), \fIf_file_write_range\fP(3), \fIf_file_write_until\fP(3), \fIrename()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
