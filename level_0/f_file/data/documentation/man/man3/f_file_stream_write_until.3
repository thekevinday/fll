.TH f_file_stream_write_until "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
f_file_stream_write_until
.SH SYNOPSIS
.nf
.B #include <file.h>
.sp
\fBf_status_t f_file_stream_write_until\fP(
    \fBconst f_file_t          \fP\fIfile\fP,
    \fBconst f_string_static_t \fP\fIbuffer\fP,
    \fBconst f_array_length_t  \fP\fItotal\fP,
    \fBf_array_length_t *const \fP\fIwritten\fP
);
.fi
.SH DESCRIPTION
.PP
Write until a given number or entire buffer is written.
.SH PARAMETERS
.TP
.B file
The file to write to. The file must already be open. The file.size_write represents the amount to process at a given time.

.TP
.B buffer
The buffer to write to the file.

.TP
.B total
The total bytes to write, unless end of buffer is reached first.

.TP
.B written
The total bytes written. Set pointer to 0 to not use.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_none_eof\fP when the file stream is at the end of the file.
.br
\fBF_none_eos\fP on success but range.stop exceeded buffer.used (only wrote up to buffer.used).
.br
\fBF_none_stop\fP on success but no data was written (written == 0) (not an error and often happens if file type is not a regular file).
.br
\fBF_data_not\fP on success but either buffer.used or total is 0.
.br
\fBF_file_write\fP (with error bit) on error during file write.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_file_write\fP (with error bit) on any other error.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
