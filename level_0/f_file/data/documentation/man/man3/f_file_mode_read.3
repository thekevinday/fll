.TH f_file_mode_read "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_file_mode_read
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_mode_read\fP(
    \fBconst f_string_static_t \fP\fIpath\fP,
    \fBconst bool              \fP\fIdereference\fP,
    \fBmode_t *const           \fP\fImode\fP
);
.fi
.SH DESCRIPTION
.PP
Get the current file mode as an f_file_mode_t.
.PP
The file mode contains more than the file modes such as read, write, and execute. The file mode also returns the file type. This means that this function must handle dereferencing as needed even if the file is a symbolic link.
.SH PARAMETERS
.TP
.B path
The path file name.

.TP
.B dereference
Set to TRUE to dereference symlinks. Set to FALSE to operate on the symlink itself.

.TP
.B mode
The read file mode.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if path.used is 0.
.br
\fBF_access_denied\fP (with error bit) if access to the file was denied.
.br
\fBF_directory_not\fP (with error bit) on invalid directory.
.br
\fBF_file_found_not\fP (with error bit) if the file was not found.
.br
\fBF_loop\fP (with error bit) on loop error.
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_name\fP (with error bit) on path name error.
.br
\fBF_number_overflow\fP (with error bit) on overflow error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_file_access\fP(3), \fIf_file_access_at\fP(3), \fIf_file_clone\fP(3), \fIf_file_close\fP(3), \fIf_file_close_flush\fP(3), \fIf_file_copy\fP(3), \fIf_file_create\fP(3), \fIf_file_create_at\fP(3), \fIf_file_create_device\fP(3), \fIf_file_create_device_at\fP(3), \fIf_file_create_fifo\fP(3), \fIf_file_create_fifo_at\fP(3), \fIf_file_create_node\fP(3), \fIf_file_create_node_at\fP(3), \fIf_file_descriptor\fP(3), \fIf_file_exists\fP(3), \fIf_file_exists_at\fP(3), \fIf_file_flush\fP(3), \fIf_file_group_read\fP(3), \fIf_file_is\fP(3), \fIf_file_is_at\fP(3), \fIf_file_link\fP(3), \fIf_file_link_at\fP(3), \fIf_file_link_hard\fP(3), \fIf_file_link_hard_at\fP(3), \fIf_file_link_read\fP(3), \fIf_file_link_read_at\fP(3), \fIf_file_mode_determine\fP(3), \fIf_file_mode_from_string\fP(3), \fIf_file_mode_read\fP(3), \fIf_file_mode_read_at\fP(3), \fIf_file_mode_set\fP(3), \fIf_file_mode_set_at\fP(3), \fIf_file_mode_to_mode\fP(3), \fIf_file_name_base\fP(3), \fIf_file_name_directory\fP(3), \fIf_file_open\fP(3), \fIf_file_open_at\fP(3), \fIf_file_owner_read\fP(3), \fIf_file_read\fP(3), \fIf_file_read_block\fP(3), \fIf_file_read_until\fP(3), \fIf_file_remove\fP(3), \fIf_file_remove_at\fP(3), \fIf_file_rename\fP(3), \fIf_file_rename_at\fP(3), \fIf_file_role_change\fP(3), \fIf_file_role_change_at\fP(3), \fIf_file_seek\fP(3), \fIf_file_size\fP(3), \fIf_file_size_at\fP(3), \fIf_file_size_by_id\fP(3), \fIf_file_stat\fP(3), \fIf_file_stat_at\fP(3), \fIf_file_stat_by_id\fP(3), \fIf_file_stream_close\fP(3), \fIf_file_stream_open\fP(3), \fIf_file_stream_open_descriptor\fP(3), \fIf_file_stream_read\fP(3), \fIf_file_stream_read_block\fP(3), \fIf_file_stream_read_until\fP(3), \fIf_file_stream_reopen\fP(3), \fIf_file_stream_write\fP(3), \fIf_file_stream_write_block\fP(3), \fIf_file_stream_write_range\fP(3), \fIf_file_stream_write_until\fP(3), \fIf_file_touch\fP(3), \fIf_file_touch_at\fP(3), \fIf_file_type\fP(3), \fIf_file_type_at\fP(3), \fIf_file_umask_get\fP(3), \fIf_file_umask_set\fP(3), \fIf_file_write\fP(3), \fIf_file_write_block\fP(3), \fIf_file_write_range\fP(3), \fIf_file_write_until\fP(3), \fIlstat()\fP, \fIstat()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
