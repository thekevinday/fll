.TH f_file_copy "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_file_copy
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_copy\fP(
    \fBconst f_string_static_t   \fP\fIsource\fP,
    \fBconst f_string_static_t   \fP\fIdestination\fP,
    \fBconst f_mode_t            \fP\fImode\fP,
    \fBconst f_number_unsigned_t \fP\fIsize_block\fP,
    \fBconst uint8_t             \fP\fIflag\fP
);
.fi
.SH DESCRIPTION
.PP
Copy a file.
.PP
The paths must not contain NULL except for the terminating NULL. The paths must be NULL terminated.
.PP
For directory file types, this will only copy the directory itself and not its contents.
.PP
This does not copy unknown file types.
.PP
This does not set mode based on umask(), be sure to apply umask if so desired. (such as: mode & ~mask).
.PP
If f_file_stat_flag_reference_e, will operate directly on a link rather than what it references. If not f_file_stat_flag_reference_e, will dereference any links.
.SH PARAMETERS
.TP
.B source
The path to the file to copy from.

.TP
.B destination
The path to copy to.

.TP
.B mode
The file mode assigned to the destination file, based on the file type.

.TP
.B size_block
The default number of chunks to read at a time with each chunk being 1-byte. Set to 0 to use default block read size.

.TP
.B flag
If f_file_stat_flag_exclusive_e, will fail when file already exists. If not f_file_stat_flag_exclusive_e, will not fail if file already exists (existing file will be replaced).

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if source.used or destination.used is 0.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_busy\fP (with error bit) if file system is too busy to perform write.
.br
\fBF_directory_not\fP (with error bit) if a supposed directory in path is not actually a directory.
.br
\fBF_file_found\fP (with error bit) if a file was found while exclusive is TRUE.
.br
\fBF_file_open_max\fP (with error bit) when system-wide max open files is reached.
.br
\fBF_file_read\fP (with error bit) on file read error.
.br
\fBF_file_write\fP (with error bit) on file write error.
.br
\fBF_filesystem_quota_block\fP (with error bit) if file system's disk blocks or inodes are exhausted.
.br
\fBF_interrupt\fP (with error bit) when program received an interrupt signal, halting operation.
.br
\fBF_loop\fP (with error bit) on loop error.
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_name\fP (with error bit) on path name error.
.br
\fBF_number_overflow\fP (with error bit) on overflow error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_prohibited\fP (with error bit) if file system does not allow for making changes.
.br
\fBF_read_only\fP (with error bit) if file is read-only.
.br
\fBF_space_not\fP (with error bit) if file system is out of space (or file system quota is reached).
.br
\fBF_supported_not\fP if copying a given type of file is unsupported.
.br
\fBF_failure\fP (with error bit) for any other error.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_file_access\fP(3), \fIf_file_access_at\fP(3), \fIf_file_clone\fP(3), \fIf_file_close\fP(3), \fIf_file_close_flush\fP(3), \fIf_file_copy\fP(3), \fIf_file_create\fP(3), \fIf_file_create_at\fP(3), \fIf_file_create_device\fP(3), \fIf_file_create_device_at\fP(3), \fIf_file_create_fifo\fP(3), \fIf_file_create_fifo_at\fP(3), \fIf_file_create_node\fP(3), \fIf_file_create_node_at\fP(3), \fIf_file_descriptor\fP(3), \fIf_file_exists\fP(3), \fIf_file_exists_at\fP(3), \fIf_file_flush\fP(3), \fIf_file_group_read\fP(3), \fIf_file_is\fP(3), \fIf_file_is_at\fP(3), \fIf_file_link\fP(3), \fIf_file_link_at\fP(3), \fIf_file_link_hard\fP(3), \fIf_file_link_hard_at\fP(3), \fIf_file_link_read\fP(3), \fIf_file_link_read_at\fP(3), \fIf_file_mode_determine\fP(3), \fIf_file_mode_from_string\fP(3), \fIf_file_mode_read\fP(3), \fIf_file_mode_read_at\fP(3), \fIf_file_mode_set\fP(3), \fIf_file_mode_set_at\fP(3), \fIf_file_mode_to_mode\fP(3), \fIf_file_name_base\fP(3), \fIf_file_name_directory\fP(3), \fIf_file_open\fP(3), \fIf_file_open_at\fP(3), \fIf_file_owner_read\fP(3), \fIf_file_read\fP(3), \fIf_file_read_block\fP(3), \fIf_file_read_until\fP(3), \fIf_file_remove\fP(3), \fIf_file_remove_at\fP(3), \fIf_file_rename\fP(3), \fIf_file_rename_at\fP(3), \fIf_file_role_change\fP(3), \fIf_file_role_change_at\fP(3), \fIf_file_seek\fP(3), \fIf_file_size\fP(3), \fIf_file_size_at\fP(3), \fIf_file_size_by_id\fP(3), \fIf_file_stat\fP(3), \fIf_file_stat_at\fP(3), \fIf_file_stat_by_id\fP(3), \fIf_file_stream_close\fP(3), \fIf_file_stream_open\fP(3), \fIf_file_stream_open_descriptor\fP(3), \fIf_file_stream_read\fP(3), \fIf_file_stream_read_block\fP(3), \fIf_file_stream_read_until\fP(3), \fIf_file_stream_reopen\fP(3), \fIf_file_stream_write\fP(3), \fIf_file_stream_write_block\fP(3), \fIf_file_stream_write_range\fP(3), \fIf_file_stream_write_until\fP(3), \fIf_file_touch\fP(3), \fIf_file_touch_at\fP(3), \fIf_file_type\fP(3), \fIf_file_type_at\fP(3), \fIf_file_umask_get\fP(3), \fIf_file_umask_set\fP(3), \fIf_file_write\fP(3), \fIf_file_write_block\fP(3), \fIf_file_write_range\fP(3), \fIf_file_write_until\fP(3)
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
