.TH f_file_stream_read_until "3" "July 2023" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_file_stream_read_until
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_stream_read_until\fP(
    \fBconst f_file_t            \fP\fIfile\fP,
    \fBconst f_array_length_t    \fP\fItotal\fP,
    \fBf_string_dynamic_t *const \fP\fIbuffer\fP
);
.fi
.SH DESCRIPTION
.PP
Read until a given number or EOF is reached, storing it in the buffer.
.PP
To check how much was read into the buffer, record buffer->used before execution and compare to buffer->used after execution.
.PP
This is different from simply using the file.size_read. The file.size_read represents the amount to process at a given time. The total represents the maximum number of file.size_read to process. For example, if file.size_read is 16 and total is 128, then this function would need to be called 8 times until total is reached.
.SH PARAMETERS
.TP
.B file
The file to read. The file must already be open. The file.size_read represents the amount to process at a given time.

.TP
.B total
The total bytes to read, unless EOF is reached first.

.TP
.B buffer
The buffer the file is being read into.

.SH RETURN VALUE
.PP
\fBF_none_eof\fP on success and EOF was reached.
.br
\fBF_none_stop\fP on success and total was reached.
.br
\fBF_error\fP (with error bit) if the file is already in the error state at the start of this function.
.br
\fBF_file_closed\fP (with error bit) if the file is closed.
.br
\fBF_file_read\fP (with error bit) on file read error.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
Errors (with error bit) from: f_string_dynamic_increase_by().
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
