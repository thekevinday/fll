.TH f_file_mode_determine "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
f_file_mode_determine
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_mode_determine\fP(
    \fBconst mode_t        \fP\fImode_file\fP,
    \fBconst f_file_mode_t \fP\fImode_change\fP,
    \fBconst uint8_t       \fP\fImode_replace\fP,
    \fBconst bool          \fP\fIdirectory_is\fP,
    \fBmode_t *const       \fP\fImode\fP
);
.fi
.SH DESCRIPTION
.PP
Determine how the mode should be applied based on different file properties and the given mode properties.
.PP
This does not set mode based on umask(), which is already applied if f_file_mode_from_string() was used to create mode_change.
.PP
apparently "u+g" is valid such that the mode from the group (g) is applied to the user (u) mode.
.SH PARAMETERS
.TP
.B mode_file
The mode_t value representing the file's current mode. This is expected to be populated from (struct stat).st_mode.

.TP
.B mode_change
The file mode values to change.

.TP
.B mode_replace
The modes designated to be replaced instead of simply changed.

.TP
.B directory_is
Set to TRUE if the file is a directory, FALSE otherwise.

.TP
.B mode
The determined mode.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
