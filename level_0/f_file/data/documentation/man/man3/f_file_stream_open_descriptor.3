.TH f_file_stream_open_descriptor "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_file_stream_open_descriptor
.SH SYNOPSIS
.nf
.B #include <fll/level_0/file.h>
.sp
\fBf_status_t f_file_stream_open_descriptor\fP(
    \fBconst f_string_static_t \fP\fImode\fP,
    \fBf_file_t *const         \fP\fIfile\fP
);
.fi
.SH DESCRIPTION
.PP
Open a file stream from a file descriptor.
.SH PARAMETERS
.TP
.B mode
The file modes do use when opening. Set mode.used to 0 to determine mode from file.flags (falling back to read only as a failsafe). If neither truncate nor append are not specified in write only mode, then the failsafe is to append. This should match the modes used to open the file descriptor as it relates to the stream modes.

.TP
.B file
The file with a valid file descriptor (file.id). THe file stream (file.stream) is updated on success, but may be set to NULL on error.

.SH RETURN VALUE
.PP
\fBF_none\fP is returned on success.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_block\fP (with error bit) if the action would block and non-blocking is set on the stream.
.br
\fBF_buffer\fP (with error bit) if the buffer is invalid.
.br
\fBF_deadlock\fP (with error bit) if operation would cause a deadlock.
.br
\fBF_file_descriptor\fP (with error bit) if file descriptor is invalid.
.br
\fBF_file_descriptor_max\fP (with error bit) if max file descriptors is reached.
.br
\fBF_file_overflow\fP (with error bit) if the write exceeds some implementation defined maximum file size.
.br
\fBF_file_type_not_directory\fP (with error bit) if F_NOTIFY was specified and file.id is not a directory.
.br
\fBF_interrupt\fP (with error bit) when program received an interrupt signal, halting operation.
.br
\fBF_lock\fP (with error bit) if failed to lock, such as lock table is full or too many open segments.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_pipe_not\fP (with error bit) if the stream is a pipe or a socket but the pipe or socket is already closed.
.br
\fBF_prohibited\fP (with error bit) if file system does not allow for making changes.
.br
\fBF_socket_not\fP (with error bit) if socket is not connected.
.br
\fBF_space_not\fP (with error bit) if the file system is out of space (or file system quota is reached).
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_file_access\fP(3), \fIf_file_access_at\fP(3), \fIf_file_clone\fP(3), \fIf_file_close\fP(3), \fIf_file_close_flush\fP(3), \fIf_file_copy\fP(3), \fIf_file_create\fP(3), \fIf_file_create_at\fP(3), \fIf_file_create_device\fP(3), \fIf_file_create_device_at\fP(3), \fIf_file_create_fifo\fP(3), \fIf_file_create_fifo_at\fP(3), \fIf_file_create_node\fP(3), \fIf_file_create_node_at\fP(3), \fIf_file_descriptor\fP(3), \fIf_file_exists\fP(3), \fIf_file_exists_at\fP(3), \fIf_file_flush\fP(3), \fIf_file_group_read\fP(3), \fIf_file_is\fP(3), \fIf_file_is_at\fP(3), \fIf_file_link\fP(3), \fIf_file_link_at\fP(3), \fIf_file_link_hard\fP(3), \fIf_file_link_hard_at\fP(3), \fIf_file_link_read\fP(3), \fIf_file_link_read_at\fP(3), \fIf_file_mode_determine\fP(3), \fIf_file_mode_from_string\fP(3), \fIf_file_mode_read\fP(3), \fIf_file_mode_read_at\fP(3), \fIf_file_mode_set\fP(3), \fIf_file_mode_set_at\fP(3), \fIf_file_mode_to_mode\fP(3), \fIf_file_name_base\fP(3), \fIf_file_name_directory\fP(3), \fIf_file_open\fP(3), \fIf_file_open_at\fP(3), \fIf_file_owner_read\fP(3), \fIf_file_read\fP(3), \fIf_file_read_block\fP(3), \fIf_file_read_until\fP(3), \fIf_file_remove\fP(3), \fIf_file_remove_at\fP(3), \fIf_file_rename\fP(3), \fIf_file_rename_at\fP(3), \fIf_file_role_change\fP(3), \fIf_file_role_change_at\fP(3), \fIf_file_seek\fP(3), \fIf_file_size\fP(3), \fIf_file_size_at\fP(3), \fIf_file_size_by_id\fP(3), \fIf_file_stat\fP(3), \fIf_file_stat_at\fP(3), \fIf_file_stat_by_id\fP(3), \fIf_file_stream_close\fP(3), \fIf_file_stream_open\fP(3), \fIf_file_stream_open_descriptor\fP(3), \fIf_file_stream_read\fP(3), \fIf_file_stream_read_block\fP(3), \fIf_file_stream_read_until\fP(3), \fIf_file_stream_reopen\fP(3), \fIf_file_stream_write\fP(3), \fIf_file_stream_write_block\fP(3), \fIf_file_stream_write_range\fP(3), \fIf_file_stream_write_until\fP(3), \fIf_file_touch\fP(3), \fIf_file_touch_at\fP(3), \fIf_file_type\fP(3), \fIf_file_type_at\fP(3), \fIf_file_umask_get\fP(3), \fIf_file_umask_set\fP(3), \fIf_file_write\fP(3), \fIf_file_write_block\fP(3), \fIf_file_write_range\fP(3), \fIf_file_write_until\fP(3), \fIfdopen()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
