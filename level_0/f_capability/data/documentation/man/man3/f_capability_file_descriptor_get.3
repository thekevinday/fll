.TH f_capability_file_descriptor_get "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_capability_file_descriptor_get
.SH SYNOPSIS
.nf
.B #include <fll/level_0/capability.h>
.sp
\fBf_status_t f_capability_file_descriptor_get\fP(
    \fBconst int             \fP\fIdescriptor\fP,
    \fBf_capability_t *const \fP\fIcapability\fP
);
.fi
.SH DESCRIPTION
.PP
Get the capability of a file represented by a file descriptor.
.SH PARAMETERS
.TP
.B descriptor
The file descriptor.

.TP
.B capability
The retrieved capability. This must be freed via f_capability_delete() when finished with.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_descriptor_not\fP (with error bit) if the file descriptor is invalid.
.br
\fBF_directory_not\fP (with error bit) if a directory containing the file does not exist.
.br
\fBF_file_found_not\fP (with error bit) if file was not found.
.br
\fBF_implemented_not\fP (with error bit) if this function is not available (due to not having libcap support compiled in).
.br
\fBF_memory_not\fP (with error bit) if a out of memory.
.br
\fBF_name_not\fP (with error bit) if the file name is too long.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_prohibited\fP (with error bit) if the file system does not permit this operation.
.br
\fBF_supported_not\fP (with error bit) if the file system does not support this operation.
.br
\fBF_failure\fP (with error bit) on any other failure.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_capability_ambient_get\fP(3), \fIf_capability_ambient_reset\fP(3), \fIf_capability_ambient_set\fP(3), \fIf_capability_clear\fP(3), \fIf_capability_clear_flag\fP(3), \fIf_capability_compare\fP(3), \fIf_capability_copy\fP(3), \fIf_capability_copy_external\fP(3), \fIf_capability_copy_internal\fP(3), \fIf_capability_delete\fP(3), \fIf_capability_file_descriptor_get\fP(3), \fIf_capability_file_descriptor_set\fP(3), \fIf_capability_file_get\fP(3), \fIf_capability_file_set\fP(3), \fIf_capability_flag_get\fP(3), \fIf_capability_flag_set\fP(3), \fIf_capability_from_name\fP(3), \fIf_capability_from_text\fP(3), \fIf_capability_groups_set\fP(3), \fIf_capability_initialize\fP(3), \fIf_capability_mode_get\fP(3), \fIf_capability_mode_get_name\fP(3), \fIf_capability_mode_set\fP(3), \fIf_capability_owner_get\fP(3), \fIf_capability_owner_set\fP(3), \fIf_capability_process_bound_drop\fP(3), \fIf_capability_process_bound_get\fP(3), \fIf_capability_process_get\fP(3), \fIf_capability_process_get_by_id\fP(3), \fIf_capability_process_set\fP(3), \fIf_capability_security_bits_get\fP(3), \fIf_capability_security_bits_set\fP(3), \fIf_capability_size\fP(3), \fIf_capability_supported\fP(3), \fIf_capability_supported_ambient\fP(3), \fIf_capability_supported_code\fP(3), \fIf_capability_to_name\fP(3), \fIf_capability_to_text\fP(3), \fIf_capability_user_set\fP(3), \fIcap_get_fd()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
