.TH f_capability_ambient_get "3" "July 2023" "FLL - Featureless Linux Library 0.6.8" "Library Functions"
.SH "NAME"
f_capability_ambient_get
.SH SYNOPSIS
.nf
.B #include <fll/level_0/capability.h>
.sp
\fBf_status_t f_capability_ambient_get\fP(
    \fBconst f_capability_value_t \fP\fIvalue\fP,
    \fBint *const                 \fP\fIambient\fP
);
.fi
.SH DESCRIPTION
.PP
Provides capability related functionality.
.PP
Capabilities are POSIX compliant as of POSIX 1003.1e (as a draft). Because it is only in POSIX as a draft, they are available via libcap instead of libc. Special linking is necessary and this project provides a wrapper that makes capabilities easier to work with whether libcap (and therefore capabilities) is available or not.
.PP
When di_libcap is defined (-D_di_libcap_) then many of the structures and functions provided here are stubs. Compilations with di_libcap will not be binary compatible with compilations without di_libcap.
.PP
The libcap documentation claims that the Linux kernel fails to honor the POSIX semantics for setting capabilities and securebits in the presence of pthreads. This is because changing capability sets, by default, only affects the running thread. The libcap documentation further claims that "To be meaningfully secure, however, the capability sets should be mirrored by all threads...". This is untrue and should be considered with caution (for example, a init program (like sysvinit) may want to run different threads with different capabilities). The libcap povides a separate libray "libpsx", for threads and then suggests linking with "-lcap -lpsx -lpthread --wrap=pthread_create" to "work-around" the perceived limitation. Use such a work-around with caution. This project makes no assumptions that all threads must share capabilities. This project instead recommends explicitly setting the capabilities for each thread (when capabilities change, then change all appropriate threads). Set the ambient capability.
.SH PARAMETERS
.TP
.B value
The capability value.

.TP
.B ambient
The retrieved ambient value.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_implemented_not\fP (with error bit) if this function is not available (due to not having libcap support compiled in).
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_supported_not\fP (with error bit) if the system does not support ambient capabilities.
.br
\fBF_failure\fP (with error bit) on any other failure.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
