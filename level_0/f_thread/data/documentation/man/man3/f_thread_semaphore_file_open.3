.TH f_thread_semaphore_file_open "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_thread_semaphore_file_open
.SH SYNOPSIS
.nf
.B #include <fll/level_0/thread.h>
.sp
\fBf_status_t f_thread_semaphore_file_open\fP(
    \fBconst f_string_static_t \fP\fIname\fP,
    \fBconst int               \fP\fIflag\fP,
    \fBconst mode_t            \fP\fImode\fP,
    \fBunsigned int            \fP\fIvalue\fP,
    \fBf_thread_semaphore_t  **\fP\fIsemaphore\fP
);
.fi
.SH DESCRIPTION
.PP
Open or create a thread (named) semaphore file.
.SH PARAMETERS
.TP
.B name
The semaphore file name to create.

.TP
.B flag
The file create/open flags. Pass the O_CREATE flag to create the semaphore file.

.TP
.B mode
(optional) The file permissions to assign the semaphore. Ignored if O_CREAT is not used in flag. Ignored if the named semaphore already exists.

.TP
.B value
(optional) The value to initially assign the semaphore on creation. Ignored if O_CREAT is not used in flag. Ignored if the named semaphore already exists.

.TP
.B semaphore
The thread semaphore.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_access_denied\fP (with error bit) on access denied.
.br
\fBF_file_descriptor_max\fP (with error bit) if max file descrriptors was reached.
.br
\fBF_file_found\fP (with error bit) if the file was found and both the O_CREAT and O_EXCL flags are set.
.br
\fBF_file_open_max\fP (with error bit) too many open files.
.br
\fBF_file_found_not\fP (with error bit) if the file was not found and the O_CREAT is not set.
.br
\fBF_name_not\fP (with error bit) if file name is too long.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_supported_not\fP (with error bit) if the system does not support the process shared semaphore (shared == true).
.br
\fBF_memory_not\fP (with error bit) if out of memory.
.br
\fBF_failure\fP (with error bit) on any other error.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_thread_at_fork\fP(3), \fIf_thread_attribute_affinity_get\fP(3), \fIf_thread_attribute_affinity_set\fP(3), \fIf_thread_attribute_concurrency_get\fP(3), \fIf_thread_attribute_concurrency_set\fP(3), \fIf_thread_attribute_create\fP(3), \fIf_thread_attribute_default_get\fP(3), \fIf_thread_attribute_default_set\fP(3), \fIf_thread_attribute_delete\fP(3), \fIf_thread_attribute_detach_get\fP(3), \fIf_thread_attribute_detach_set\fP(3), \fIf_thread_attribute_guard_get\fP(3), \fIf_thread_attribute_guard_set\fP(3), \fIf_thread_attribute_scheduler_inherit_get\fP(3), \fIf_thread_attribute_scheduler_inherit_set\fP(3), \fIf_thread_attribute_scheduler_parameter_get\fP(3), \fIf_thread_attribute_scheduler_parameter_set\fP(3), \fIf_thread_attribute_scheduler_policy_get\fP(3), \fIf_thread_attribute_scheduler_policy_set\fP(3), \fIf_thread_attribute_scope_get\fP(3), \fIf_thread_attribute_scope_set\fP(3), \fIf_thread_attribute_stack_get\fP(3), \fIf_thread_attribute_stack_set\fP(3), \fIf_thread_attribute_stack_size_get\fP(3), \fIf_thread_attribute_stack_size_set\fP(3), \fIf_thread_barrier_attribute_create\fP(3), \fIf_thread_barrier_attribute_delete\fP(3), \fIf_thread_barrier_attribute_shared_get\fP(3), \fIf_thread_barrier_attribute_shared_set\fP(3), \fIf_thread_barrier_create\fP(3), \fIf_thread_barrier_delete\fP(3), \fIf_thread_barrier_wait\fP(3), \fIf_thread_caller\fP(3), \fIf_thread_cancel\fP(3), \fIf_thread_cancel_state_set\fP(3), \fIf_thread_cancel_test\fP(3), \fIf_thread_cancel_type_set\fP(3), \fIf_thread_clock_get_id\fP(3), \fIf_thread_compare\fP(3), \fIf_thread_condition_attribute_clock_get\fP(3), \fIf_thread_condition_attribute_clock_set\fP(3), \fIf_thread_condition_attribute_create\fP(3), \fIf_thread_condition_attribute_delete\fP(3), \fIf_thread_condition_attribute_shared_get\fP(3), \fIf_thread_condition_attribute_shared_set\fP(3), \fIf_thread_condition_create\fP(3), \fIf_thread_condition_delete\fP(3), \fIf_thread_condition_signal\fP(3), \fIf_thread_condition_signal_all\fP(3), \fIf_thread_condition_wait\fP(3), \fIf_thread_condition_wait_timed\fP(3), \fIf_thread_create\fP(3), \fIf_thread_detach\fP(3), \fIf_thread_exit\fP(3), \fIf_thread_join\fP(3), \fIf_thread_join_timed\fP(3), \fIf_thread_join_try\fP(3), \fIf_thread_key_create\fP(3), \fIf_thread_key_delete\fP(3), \fIf_thread_key_get\fP(3), \fIf_thread_key_set\fP(3), \fIf_thread_lock_attribute_create\fP(3), \fIf_thread_lock_attribute_delete\fP(3), \fIf_thread_lock_attribute_shared_get\fP(3), \fIf_thread_lock_attribute_shared_set\fP(3), \fIf_thread_lock_create\fP(3), \fIf_thread_lock_delete\fP(3), \fIf_thread_lock_read\fP(3), \fIf_thread_lock_read_timed\fP(3), \fIf_thread_lock_read_try\fP(3), \fIf_thread_lock_write\fP(3), \fIf_thread_lock_write_timed\fP(3), \fIf_thread_lock_write_try\fP(3), \fIf_thread_mutex_attribute_create\fP(3), \fIf_thread_mutex_attribute_delete\fP(3), \fIf_thread_mutex_attribute_priority_ceiling_get\fP(3), \fIf_thread_mutex_attribute_priority_ceiling_set\fP(3), \fIf_thread_mutex_attribute_protocol_get\fP(3), \fIf_thread_mutex_attribute_protocol_set\fP(3), \fIf_thread_mutex_attribute_shared_get\fP(3), \fIf_thread_mutex_attribute_shared_set\fP(3), \fIf_thread_mutex_attribute_type_get\fP(3), \fIf_thread_mutex_attribute_type_set\fP(3), \fIf_thread_mutex_create\fP(3), \fIf_thread_mutex_delete\fP(3), \fIf_thread_mutex_lock\fP(3), \fIf_thread_mutex_lock_timed\fP(3), \fIf_thread_mutex_lock_try\fP(3), \fIf_thread_mutex_priority_ceiling_get\fP(3), \fIf_thread_mutex_priority_ceiling_set\fP(3), \fIf_thread_mutex_unlock\fP(3), \fIf_thread_once\fP(3), \fIf_thread_scheduler_parameter_get\fP(3), \fIf_thread_scheduler_parameter_set\fP(3), \fIf_thread_scheduler_priority_set\fP(3), \fIf_thread_semaphore_create\fP(3), \fIf_thread_semaphore_delete\fP(3), \fIf_thread_semaphore_file_close\fP(3), \fIf_thread_semaphore_file_delete\fP(3), \fIf_thread_semaphore_file_open\fP(3), \fIf_thread_semaphore_lock\fP(3), \fIf_thread_semaphore_lock_timed\fP(3), \fIf_thread_semaphore_lock_try\fP(3), \fIf_thread_semaphore_unlock\fP(3), \fIf_thread_semaphore_value_get\fP(3), \fIf_thread_signal_mask\fP(3), \fIf_thread_signal_queue\fP(3), \fIf_thread_signal_write\fP(3), \fIf_thread_spin_create\fP(3), \fIf_thread_spin_delete\fP(3), \fIf_thread_spin_lock\fP(3), \fIf_thread_spin_lock_try\fP(3), \fIf_thread_spin_unlock\fP(3), \fIf_thread_unlock\fP(3), \fIsem_open()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
