.TH f_fss_nests_increase "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_fss_nests_increase
.SH SYNOPSIS
.nf
.B #include <fll/level_0/fss.h>
.sp
\fBf_status_t f_fss_nests_increase\fP(
    \fBconst f_array_length_t \fP\fIstep\fP,
    \fBf_fss_nests_t *const   \fP\fInests\fP
);
.fi
.SH DESCRIPTION
.PP
Increase the size of the nests array, but only if necessary.
.PP
If the given length is too large for the buffer, then attempt to set max buffer size (F_array_length_t_size_d). If already set to the maximum buffer size, then the resize will fail.
.SH PARAMETERS
.TP
.B step
The allocation step to use. Must be greater than 0.

.TP
.B nests
The nests array to resize.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP on success, but there is no reason to increase size (used + 1 <= size).
.br
\fBF_array_too_large\fP (with error bit) if the new array length is too large.
.br
\fBF_memory_not\fP (with error bit) on out of memory.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_fss_items_adjust\fP(3), \fIf_fss_items_decimate_by\fP(3), \fIf_fss_items_decrease_by\fP(3), \fIf_fss_items_increase\fP(3), \fIf_fss_items_increase_by\fP(3), \fIf_fss_items_resize\fP(3), \fIf_fss_nest_adjust\fP(3), \fIf_fss_nest_decimate_by\fP(3), \fIf_fss_nest_decrease_by\fP(3), \fIf_fss_nest_increase\fP(3), \fIf_fss_nest_increase_by\fP(3), \fIf_fss_nest_resize\fP(3), \fIf_fss_nests_adjust\fP(3), \fIf_fss_nests_decimate_by\fP(3), \fIf_fss_nests_decrease_by\fP(3), \fIf_fss_nests_increase\fP(3), \fIf_fss_nests_increase_by\fP(3), \fIf_fss_nests_resize\fP(3)
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
