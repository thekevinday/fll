.TH f_print_except_dynamic_safely "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_print_except_dynamic_safely
.SH SYNOPSIS
.nf
.B #include <fll/level_0/print.h>
.sp
\fBf_status_t f_print_except_dynamic_safely\fP(
    \fBconst f_string_static_t \fP\fIbuffer\fP,
    \fBconst f_array_lengths_t \fP\fIexcept\fP,
    \fBFILE *const             \fP\fIstream\fP
);
.fi
.SH DESCRIPTION
.PP
Similar to a c-library printf, except that this prints a given dynamic string.
.PP
Control characters are converted to the Unicode control character symbols, excluding NULL. UTF-8 sequences with invalid widths are converted to the unknown character 'ï¿½'.
.PP
Will not stop at NULL. Will not print NULL. Will not print any 1-byte character at a location specified in except array. Will print up to length 1-byte characters.
.PP
This print function does not use locking, be sure something like flockfile() and funlockfile() are appropriately called.
.SH PARAMETERS
.TP
.B buffer
The string to output.

.TP
.B except
An array of locations within the given string to not print. The array of locations is required/assumed to be in linear order.

.TP
.B stream
The file stream to output to, including standard streams such as stdout and stderr.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if there is nothing to print.
.br
\fBF_output\fP (with error bit) on failure.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_print\fP(3), \fIf_print_character\fP(3), \fIf_print_character_safely\fP(3), \fIf_print_character_safely_get\fP(3), \fIf_print_dynamic\fP(3), \fIf_print_dynamic_partial\fP(3), \fIf_print_dynamic_partial_raw\fP(3), \fIf_print_dynamic_partial_raw_safely\fP(3), \fIf_print_dynamic_partial_safely\fP(3), \fIf_print_dynamic_raw\fP(3), \fIf_print_dynamic_raw_safely\fP(3), \fIf_print_dynamic_safely\fP(3), \fIf_print_except\fP(3), \fIf_print_except_dynamic\fP(3), \fIf_print_except_dynamic_partial\fP(3), \fIf_print_except_dynamic_partial_raw\fP(3), \fIf_print_except_dynamic_partial_raw_safely\fP(3), \fIf_print_except_dynamic_partial_safely\fP(3), \fIf_print_except_dynamic_raw\fP(3), \fIf_print_except_dynamic_raw_safely\fP(3), \fIf_print_except_dynamic_safely\fP(3), \fIf_print_except_in\fP(3), \fIf_print_except_in_dynamic\fP(3), \fIf_print_except_in_dynamic_partial\fP(3), \fIf_print_except_in_dynamic_partial_raw\fP(3), \fIf_print_except_in_dynamic_partial_raw_safely\fP(3), \fIf_print_except_in_dynamic_partial_safely\fP(3), \fIf_print_except_in_dynamic_raw\fP(3), \fIf_print_except_in_dynamic_raw_safely\fP(3), \fIf_print_except_in_dynamic_safely\fP(3), \fIf_print_except_in_raw\fP(3), \fIf_print_except_in_raw_safely\fP(3), \fIf_print_except_in_safely\fP(3), \fIf_print_except_raw\fP(3), \fIf_print_except_raw_safely\fP(3), \fIf_print_except_safely\fP(3), \fIf_print_raw\fP(3), \fIf_print_raw_safely\fP(3), \fIf_print_raw_terminated\fP(3), \fIf_print_safely\fP(3), \fIf_print_safely_get\fP(3), \fIf_print_safely_terminated\fP(3), \fIf_print_terminated\fP(3), \fIclearerr_unlocked()\fP, \fIferror_unlocked()\fP, \fIfwrite_unlocked()\fP, \fIf_utf_is_valid()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
