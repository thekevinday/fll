.TH f_print_character_safely "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_print_character_safely
.SH SYNOPSIS
.nf
.B #include <fll/level_0/print.h>
.sp
\fBf_status_t f_print_character_safely\fP(
    \fBconst f_char_t \fP\fIcharacter\fP,
    \fBFILE *const    \fP\fIstream\fP
);
.fi
.SH DESCRIPTION
.PP
Given a single 1-byte character, print the character or a replacement if the character is not considered safe.
.PP
Control characters are converted to the Unicode control character symbols, including NULL. UTF-8 sequences with invalid widths are converted to the unknown character 'ï¿½'. This can result in the 1-byte character being substituted with a 3-byte character when printing.
.PP
For UTF-8 characters, this cannot detect if the UTF-8 character is a control or anything else. This is, in genereal, not safe for printing UTF-8 characters given that a character is 1-byte.
.PP
This should only be called for the first 1-byte character of a multibyte character.
.PP
This does not call clearerr_unlocked().
.SH PARAMETERS
.TP
.B character
The character to verify as safe or not and then print.

.TP
.B stream
The file stream to output to, including standard streams such as stdout and stderr.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if there is nothing to print.
.br
\fBF_utf\fP on success, but character is a UTF-8 character.
.br
\fBF_output\fP (with error bit) on failure (fwrite_unlocked() returns 0).
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_print\fP(3), \fIf_print_character\fP(3), \fIf_print_character_safely\fP(3), \fIf_print_character_safely_get\fP(3), \fIf_print_dynamic\fP(3), \fIf_print_dynamic_partial\fP(3), \fIf_print_dynamic_partial_raw\fP(3), \fIf_print_dynamic_partial_raw_safely\fP(3), \fIf_print_dynamic_partial_safely\fP(3), \fIf_print_dynamic_raw\fP(3), \fIf_print_dynamic_raw_safely\fP(3), \fIf_print_dynamic_safely\fP(3), \fIf_print_except\fP(3), \fIf_print_except_dynamic\fP(3), \fIf_print_except_dynamic_partial\fP(3), \fIf_print_except_dynamic_partial_raw\fP(3), \fIf_print_except_dynamic_partial_raw_safely\fP(3), \fIf_print_except_dynamic_partial_safely\fP(3), \fIf_print_except_dynamic_raw\fP(3), \fIf_print_except_dynamic_raw_safely\fP(3), \fIf_print_except_dynamic_safely\fP(3), \fIf_print_except_in\fP(3), \fIf_print_except_in_dynamic\fP(3), \fIf_print_except_in_dynamic_partial\fP(3), \fIf_print_except_in_dynamic_partial_raw\fP(3), \fIf_print_except_in_dynamic_partial_raw_safely\fP(3), \fIf_print_except_in_dynamic_partial_safely\fP(3), \fIf_print_except_in_dynamic_raw\fP(3), \fIf_print_except_in_dynamic_raw_safely\fP(3), \fIf_print_except_in_dynamic_safely\fP(3), \fIf_print_except_in_raw\fP(3), \fIf_print_except_in_raw_safely\fP(3), \fIf_print_except_in_safely\fP(3), \fIf_print_except_raw\fP(3), \fIf_print_except_raw_safely\fP(3), \fIf_print_except_safely\fP(3), \fIf_print_raw\fP(3), \fIf_print_raw_safely\fP(3), \fIf_print_raw_terminated\fP(3), \fIf_print_safely\fP(3), \fIf_print_safely_get\fP(3), \fIf_print_safely_terminated\fP(3), \fIf_print_terminated\fP(3), \fIclearerr_unlocked()\fP, \fIferror_unlocked()\fP, \fIfwrite_unlocked()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
