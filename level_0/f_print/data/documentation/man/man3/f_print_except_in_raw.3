.TH f_print_except_in_raw "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_print_except_in_raw
.SH SYNOPSIS
.nf
.B #include <fll/level_0/print.h>
.sp
\fBf_status_t f_print_except_in_raw\fP(
    \fBconst f_string_t        \fP\fIstring\fP,
    \fBconst f_array_length_t  \fP\fIoffset\fP,
    \fBconst f_array_length_t  \fP\fIlength\fP,
    \fBconst f_array_lengths_t \fP\fIexcept_at\fP,
    \fBconst f_string_ranges_t \fP\fIexcept_in\fP,
    \fBFILE *const             \fP\fIstream\fP
);
.fi
.SH DESCRIPTION
.PP
Similar to a c-library printf, except that this will only print a specific range.
.PP
An offset is provided because the except_at/except_in positions are expected to be relative to the start position, without the offset applied.
.PP
Will not stop at NULL. Will print NULL. Will not print any 1-byte character at a location specified in except_at array. Will not print any 1-byte character within the ranges specified in except_in array. Will print up to length 1-byte characters.
.PP
All UTF-8 characters, invalid or not, are printed as is.
.PP
This print function does not use locking, be sure something like flockfile() and funlockfile() are appropriately called.
.SH PARAMETERS
.TP
.B string
The string to output.

.TP
.B offset
The inclusive start point to start printing.

.TP
.B length
The total number of characters to print.

.TP
.B except_at
An array of locations within the given string to not print. The array of locations is required/assumed to be in linear order.

.TP
.B except_in
An array of ranges within the string to not print. The array of ranges is required/assumed to be in linear order.

.TP
.B stream
The file stream to output to, including standard streams such as stdout and stderr.

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_data_not\fP if there is nothing to print.
.br
\fBF_output\fP (with error bit) on failure.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_print\fP(3), \fIf_print_character\fP(3), \fIf_print_character_safely\fP(3), \fIf_print_character_safely_get\fP(3), \fIf_print_dynamic\fP(3), \fIf_print_dynamic_partial\fP(3), \fIf_print_dynamic_partial_raw\fP(3), \fIf_print_dynamic_partial_raw_safely\fP(3), \fIf_print_dynamic_partial_safely\fP(3), \fIf_print_dynamic_raw\fP(3), \fIf_print_dynamic_raw_safely\fP(3), \fIf_print_dynamic_safely\fP(3), \fIf_print_except\fP(3), \fIf_print_except_dynamic\fP(3), \fIf_print_except_dynamic_partial\fP(3), \fIf_print_except_dynamic_partial_raw\fP(3), \fIf_print_except_dynamic_partial_raw_safely\fP(3), \fIf_print_except_dynamic_partial_safely\fP(3), \fIf_print_except_dynamic_raw\fP(3), \fIf_print_except_dynamic_raw_safely\fP(3), \fIf_print_except_dynamic_safely\fP(3), \fIf_print_except_in\fP(3), \fIf_print_except_in_dynamic\fP(3), \fIf_print_except_in_dynamic_partial\fP(3), \fIf_print_except_in_dynamic_partial_raw\fP(3), \fIf_print_except_in_dynamic_partial_raw_safely\fP(3), \fIf_print_except_in_dynamic_partial_safely\fP(3), \fIf_print_except_in_dynamic_raw\fP(3), \fIf_print_except_in_dynamic_raw_safely\fP(3), \fIf_print_except_in_dynamic_safely\fP(3), \fIf_print_except_in_raw\fP(3), \fIf_print_except_in_raw_safely\fP(3), \fIf_print_except_in_safely\fP(3), \fIf_print_except_raw\fP(3), \fIf_print_except_raw_safely\fP(3), \fIf_print_except_safely\fP(3), \fIf_print_raw\fP(3), \fIf_print_raw_safely\fP(3), \fIf_print_raw_terminated\fP(3), \fIf_print_safely\fP(3), \fIf_print_safely_get\fP(3), \fIf_print_safely_terminated\fP(3), \fIf_print_terminated\fP(3), \fIclearerr_unlocked()\fP, \fIferror_unlocked()\fP, \fIfwrite_unlocked()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
