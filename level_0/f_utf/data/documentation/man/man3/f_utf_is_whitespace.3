.TH f_utf_is_whitespace "3" "July 2023" "FLL - Featureless Linux Library 0.6.6" "Library Functions"
.SH "NAME"
f_utf_is_whitespace
.SH SYNOPSIS
.nf
.B #include <is.h>
.sp
\fBf_status_t f_utf_is_whitespace\fP(
    \fBconst f_string_t       \fP\fIsequence\fP,
    \fBconst f_array_length_t \fP\fIwidth_max\fP,
    \fBconst bool             \fP\fIstrict\fP
);
.fi
.SH DESCRIPTION
.PP
Check to see if the entire byte block of the character is an ASCII or UTF-8 general space character.
.PP
Non-printing or zero-width characters are not considered white space. This does include line separators like '
.PP
' (U+000A). This does not include phonetic spaces, like white space modifiers. This does not include non-true white space characters, such as Ogham Space Mark 'áš€' (U+1680).
.PP
Phonetic spaces are white spaces with additional phonetic meaning associated with them. However, because they are not renderred as white space, they are technically not white space.
.SH PARAMETERS
.TP
.B sequence
The byte sequence to validate as a character. There must be enough space allocated to compare against, as limited by width_max.

.TP
.B width_max
The maximum width available for checking. Can be anything greater than 0.

.TP
.B strict
When TRUE, include all appropriate characters by type as per Unicode. When FALSE, non-white space characters that are treated as white space by Unicode are not treated as white space.

.SH RETURN VALUE
.PP
\fBF_true\fP if a UTF-8 white space.
.br
\fBF_false\fP if not a UTF-8 white space.
.br
\fBF_complete_not_utf\fP (with error bit set) if character is an incomplete UTF-8 sequence.
.br
\fBF_maybe\fP (with error bit) if this could be a white space but width is not long enough.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.br
\fBF_utf_fragment\fP (with error bit) if character is a UTF-8 fragment.
.br
\fBF_utf_not\fP (with error bit) if Unicode is an invalid Unicode character.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
