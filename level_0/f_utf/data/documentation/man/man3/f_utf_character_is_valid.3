.TH f_utf_character_is_valid "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_utf_character_is_valid
.SH SYNOPSIS
.nf
.B #include <fll/level_0/utf.h>
.sp
\fBf_status_t f_utf_character_is_valid\fP(
    \fBconst f_utf_char_t \fP\fIsequence\fP
);
.fi
.SH DESCRIPTION
.PP
Check to see if the entire byte block of the character is a valid (well-formed) UTF-8 character.
.PP
This does validate if the UTF-8 character is a valid UTF-8 character. To not do this, use f_utf_character_is().
.PP
ASCII character codes are considered valid by this function.
.PP
Codes U+FDD0 to U+FDEF and any character ending in FFFE or FFFF are non-characters, and are therefore invalid.
.SH PARAMETERS
.TP
.B sequence
The byte sequence to validate as a character.

.SH RETURN VALUE
.PP
\fBF_true\fP if a UTF-8 character.
.br
\fBF_false\fP if not a UTF-8 character.
.br
\fBF_utf_fragment\fP (with error bit) if character is a UTF-8 fragment.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_utf_character_is\fP(3), \fIf_utf_character_is_alphabetic\fP(3), \fIf_utf_character_is_alphabetic_digit\fP(3), \fIf_utf_character_is_alphabetic_numeric\fP(3), \fIf_utf_character_is_ascii\fP(3), \fIf_utf_character_is_combining\fP(3), \fIf_utf_character_is_control\fP(3), \fIf_utf_character_is_control_code\fP(3), \fIf_utf_character_is_control_format\fP(3), \fIf_utf_character_is_control_picture\fP(3), \fIf_utf_character_is_digit\fP(3), \fIf_utf_character_is_emoji\fP(3), \fIf_utf_character_is_fragment\fP(3), \fIf_utf_character_is_graph\fP(3), \fIf_utf_character_is_numeric\fP(3), \fIf_utf_character_is_phonetic\fP(3), \fIf_utf_character_is_private\fP(3), \fIf_utf_character_is_punctuation\fP(3), \fIf_utf_character_is_subscript\fP(3), \fIf_utf_character_is_superscript\fP(3), \fIf_utf_character_is_symbol\fP(3), \fIf_utf_character_is_unassigned\fP(3), \fIf_utf_character_is_valid\fP(3), \fIf_utf_character_is_whitespace\fP(3), \fIf_utf_character_is_whitespace_modifier\fP(3), \fIf_utf_character_is_whitespace_other\fP(3), \fIf_utf_character_is_whitespace_zero_width\fP(3), \fIf_utf_character_is_wide\fP(3), \fIf_utf_character_is_word\fP(3), \fIf_utf_character_is_word_dash\fP(3), \fIf_utf_character_is_word_dash_plus\fP(3), \fIf_utf_character_is_zero_width\fP(3), \fIf_utf_character_is()\fP, \fIf_utf_character_is()\fP, \fIf_utf_character_is_fragment()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
