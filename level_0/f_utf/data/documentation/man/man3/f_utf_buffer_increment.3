.TH f_utf_buffer_increment "3" "February 2024" "FLL - Featureless Linux Library 0.6.9" "Library Functions"
.SH "NAME"
f_utf_buffer_increment
.SH SYNOPSIS
.nf
.B #include <fll/level_0/utf.h>
.sp
\fBf_status_t f_utf_buffer_increment\fP(
    \fBconst f_string_static_t \fP\fIbuffer\fP,
    \fBf_string_range_t       *\fP\fIrange\fP,
    \fBconst f_array_length_t  \fP\fIstep\fP
);
.fi
.SH DESCRIPTION
.PP
Continue to the next character, based on step and character width.
.PP
For navigating a range within the given buffer by a specific number of characters that could be of any width allowed by UTF-8.
.PP
The start position must be at the start of a valid UTF-8 block.
.SH PARAMETERS
.TP
.B buffer
The string to process.

.TP
.B range
The start and stop positions to be incremented. The start position will be incremented by step.

.TP
.B step
The number of steps to increment the start position. The steps refer to characters and not integers. Essentially this number is considered against the width of every character found. (For ASCII each step would be sizeof(uint8_t), which is 1. (For UTF-8 character of width 3, each step would be (3 * sizeof(uint8_t)).

.SH RETURN VALUE
.PP
\fBF_none\fP on success.
.br
\fBF_none_stop\fP if the stop range is reached before all steps are completed.
.br
\fBF_none_eos\fP if the end of buffer is reached before all steps are completed.
.br
\fBF_data_not\fP if buffer is empty or out of range.
.br
\fBF_complete_not_utf_stop\fP (with error bit) if the stop range is reached before the complete UTF-8 character can be processed.
.br
\fBF_complete_not_utf_eos\fP (with error bit) if the end of buffer is reached before the complete UTF-8 character can be processed.
.br
\fBF_parameter\fP (with error bit) if a parameter is invalid.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_utf_buffer_decrement\fP(3), \fIf_utf_buffer_increment\fP(3)
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
