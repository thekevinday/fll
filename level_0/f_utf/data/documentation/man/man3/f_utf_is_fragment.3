.TH f_utf_is_fragment "3" "February 2024" "FLL - Featureless Linux Library 0.6.10" "Library Functions"
.SH "NAME"
f_utf_is_fragment
.SH SYNOPSIS
.nf
.B #include <fll/level_0/utf.h>
.sp
\fBf_status_t f_utf_is_fragment\fP(
    \fBconst f_string_t \fP\fIsequence\fP
);
.fi
.SH DESCRIPTION
.PP
Check to see if the entire byte block of the character is a 1-width UTF-8 character fragment.
.PP
Characters whose width is 1-byte are invalid. However, the character could have been cut-off, so whether or not this is actually valid should be determined by the caller.
.PP
For normal validation functions, try using f_utf_character_is() or f_utf_character_is_valid().
.PP
According to rfc3629, the valid octect sequences for UTF-8 are: UTF8-octets = *( UTF8-char ) UTF8-char = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4 UTF8-1 = x00-7F UTF8-2 = xC2-DF UTF8-tail UTF8-3 = xE0 xA0-BF UTF8-tail / xE1-EC 2( UTF8-tail ) / xED x80-9F UTF8-tail / xEE-EF 2( UTF8-tail ) UTF8-4 = xF0 x90-BF 2( UTF8-tail ) / xF1-F3 3( UTF8-tail ) / xF4 x80-8F 2( UTF8-tail ) UTF8-tail = x80-BF
.SH PARAMETERS
.TP
.B sequence
The byte sequence to validate as a character. There must be enough space allocated to compare against, as limited by width_max.

.SH RETURN VALUE
.PP
\fBF_true\fP if a UTF-8 character.
.br
\fBF_false\fP if not a UTF-8 character.
.SH SEE ALSO
.PP
.nh
.ad l
\fIf_utf_is\fP(3), \fIf_utf_is_alphabetic\fP(3), \fIf_utf_is_alphabetic_digit\fP(3), \fIf_utf_is_alphabetic_numeric\fP(3), \fIf_utf_is_ascii\fP(3), \fIf_utf_is_combining\fP(3), \fIf_utf_is_control\fP(3), \fIf_utf_is_control_code\fP(3), \fIf_utf_is_control_format\fP(3), \fIf_utf_is_control_picture\fP(3), \fIf_utf_is_digit\fP(3), \fIf_utf_is_emoji\fP(3), \fIf_utf_is_fragment\fP(3), \fIf_utf_is_graph\fP(3), \fIf_utf_is_numeric\fP(3), \fIf_utf_is_phonetic\fP(3), \fIf_utf_is_private\fP(3), \fIf_utf_is_punctuation\fP(3), \fIf_utf_is_subscript\fP(3), \fIf_utf_is_superscript\fP(3), \fIf_utf_is_symbol\fP(3), \fIf_utf_is_unassigned\fP(3), \fIf_utf_is_valid\fP(3), \fIf_utf_is_whitespace\fP(3), \fIf_utf_is_whitespace_modifier\fP(3), \fIf_utf_is_whitespace_other\fP(3), \fIf_utf_is_whitespace_zero_width\fP(3), \fIf_utf_is_wide\fP(3), \fIf_utf_is_word\fP(3), \fIf_utf_is_word_dash\fP(3), \fIf_utf_is_word_dash_plus\fP(3), \fIf_utf_is_zero_width\fP(3), \fIf_utf_character_is()\fP, \fIf_utf_character_is_valid()\fP
.ad
.hy
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2024 Kevin Day, GNU LGPL Version 2.1 or later.
