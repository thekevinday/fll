.TH f_utf_character_is_alphabetic_digit "3" "July 2023" "FLL - Featureless Linux Library 0.6.7" "Library Functions"
.SH "NAME"
f_utf_character_is_alphabetic_digit
.SH SYNOPSIS
.nf
.B #include <fll/level_0/utf.h>
.sp
\fBf_status_t f_utf_character_is_alphabetic_digit\fP(
    \fBconst f_utf_char_t \fP\fIsequence\fP,
    \fBuint64_t *const    \fP\fIvalue\fP
);
.fi
.SH DESCRIPTION
.PP
Check to see if the entire byte block of the character is an ASCII or UTF-8 alphabet or digit character.
.PP
Digit characters are digit of any base, such as decimal (base-10) or hexidecimal (base-16).
.PP
This does not include fractions such as 1/2 (½) (U+00BD).
.PP
This also processes large values such as Roman Numerals. Roman Numerals, however, conflict with traditional alphabetic characters. To avoid this only Unicode Roman Numerals found in range U+2160 to U+2188 are treated as their respective digits. For example, the Roman Numeral 'Ⅿ' (U+216F) represents 1000 rather than having 'M' (U+004D) representing 1000.
.SH PARAMETERS
.TP
.B sequence
The byte sequence to validate as a character.

.TP
.B value
(optional) The integer representation of the sequence if the sequence represents a decimal of any base type. Set to NULL to not use.

.SH RETURN VALUE
.PP
\fBF_true\fP if a UTF-8 alphabetic-decimal character.
.br
\fBF_false\fP if not a UTF-8 alphabetic-decimal character.
.br
\fBF_utf_fragment\fP (with error bit) if character is a UTF-8 fragment.
.br
\fBF_utf_not\fP (with error bit) if unicode is an invalid Unicode character.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
