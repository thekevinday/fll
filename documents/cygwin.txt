# fss-0002 iki-0000
#
# license: cc-by-sa-4.0
#
# This file (assumed to be named cygwin.txt) can be more easily read using the following iki_read commands:
#   iki_read cygwin.txt +Q -w -r FLL FLL -WW character "'" "'" code '"' '"'
#
# To read the "Cygwin" section of this file, use this command sequence:
#   fss_basic_list_read cygwin.txt +Q -cn "Cygwin" | iki_read +Q -w -r FLL FLL -WW character "'" "'" code '"' '"'
#

Cygwin:
  The following are a collection of informal notes on getting this to compile and run under bold:"Windows" using bold:"Cygwin".
  I may formalize this at a later point in time.

  I have tested and was able to successfully (statically) compile and run FLL:"Featureless Linux Library" with bold:"Byte Dump" under bold:"Cygwin".
  The resulting binary could be transfered to another machine and runs if the file:"Cygwin.dll" is copied with it (placed along the file:"byte_dump.exe").

  To compile the FLL:"Featureless Linux Library", some functionality needs to be disabled.
  Fortunately, FLL:"Featureless Linux Library" is specifically designed to be hackable so the process is easier than it might otherwise be.

  For a monolithic build, compiled statically, add the following to code:"defines" in the file:"data/build/settings" (of the packaged source files).
    code:"-D_di_libcap_ -D_pthread_attr_unsupported_ -D_pthread_sigqueue_unsupported_ -D_di_f_thread_attribute_default_get_ -D_di_f_thread_attribute_default_set_ -D_di_compiler_attributes_d_ -DF_attribute_visibility_hidden_d -DF_attribute_visibility_internal_d -DF_attribute_visibility_protected_d -DF_attribute_visibility_public_d -DF_attribute_weak_d".

  The bold:"Cygwin" system does not support special link modes, such as code:"-z now", so remove code:"-z now" from all build settings files.

  Capabilities are likely unavailable, so remove code:"-lcap" from any code:"build_libraries" references.

  For thread support, it may be necessary to explicitly specify code:"-lpthread" in addition to code:"-pthread" in each of the build settings files.

  Before packaging file:"data/build/settings", the build settings files are either found inside the individual projects or under the build directory at the root of the source repository.

  The file:"level_1/fl_control_group/c/control_group.c" (for function code:"fl_control_group_apply()") had to have the following changed from\:
    block:
      "if (unshare(CLONE_NEWCGROUP) < 0) {
        if (errno == EINVAL) return F_status_set_error(F_parameter);
        if (errno == ENOMEM) return F_status_set_error(F_memory_not);
        if (errno == ENOSPC) return F_status_set_error(F_space_not);
        if (errno == EPERM) return F_status_set_error(F_prohibited);

        return F_status_set_error(F_failure);
      }
    "
  to\:
    block:"
      return F_status_set_error(F_supported_not);
    "

  The file level_0/f_limit/c/limit.c (for function f_limit_process()) had to have the following changed from\:
    block:"
      if (prlimit(id, type, value_next, value_current) < 0) {
        if (errno == EFAULT) return F_status_set_error(F_address_not);
        if (errno == EINVAL) return F_status_set_error(F_parameter);
        if (errno == EPERM) return F_status_set_error(F_prohibited);
        if (errno == ESRCH) return F_status_set_error(F_found_not);

        return F_status_set_error(F_failure);
      }

      return F_okay;
    "
  to\:
    block:"
      return F_status_set_error(F_supported_not);
    "

  These changes may be necessary if code:"unshare()" or code:"prlimit()" are unsupported.

  There may have been other things to disable that I forgot to document.

  I do not believe I had to make any changes to compile file:"byte_dump".

  Compiling file:"byte_dump" statically against the FLL:"Featureless Linux Library" library is a bit inefficient in that it contains the entire FLL:"Featureless Linux Library" library.
  The file:"byte_dump" program only needs a portion of it.
  I may need to provide a list of everything that can be disabled to provide a smaller and more optimal file:"byte_dump" binary.
