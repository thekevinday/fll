.TH FAKE "1" "January 2023" "FLL - Featureless Make 0.6.4" "User Commands"
.SH NAME
fake \- Build or compile software similar to GNU Make.
.SH SYNOPSIS
.B fake
[\fI\,OPTIONS\/\fR] [\fI\,OPERATIONS\/\fR]
.SH DESCRIPTION
.PP
The Featureless Make program, called \fBfake\fR, is a replacement to the GNU Make program.
A goal of this program is to provide a simpler and more human-friendly syntax than that of GNU Make.
Programs like \fBautoconf\fR and \fBautomake\fR should not be needed.

This program has a \fBfakefile\fR rather than having a \fBMakefile\fR.
In addition, there is a \fBsettings\fR file that utilizes hard-coded functionality to simplify common compilation processes such as with programming languages like C and C++.
The use of a \fBsettings\fR file can greatly simplify or even obviate the need for a \fBfakefile\fR in some limited cases.

The default operation, called the \fBmake\fB operation, operates against this \fBfakefile\fR.
The \fBbuild\fR operation utilises the \fBsettings\fR file.

When performing the build operation, the \fB\-\-mode\fR parameter specifies a name (limited to alpha-numeric, underscore, and dash) to be used in addition to the global.
For example, when a mode of '\fBfll_monolithic\fR' is specified, build libraries from both '\fBbuild_libraries\fR' and '\fBbuild_libraries\-fll_monolithic\fR' are used (but not '\fBbuild_libraries\-fll_level\fR').

When specifying the fakefile or the settings parameters, the project root is seached first and then the build data director is searched when the given file does not contain a directory separator.
For example, with '\fB\-\-fakefile my_fakefile\fR' the fakefile at '\fB./my_fakefile\fR' is used if found, but if it is not found then '\fB./data/build/my_fakefile\fR' is used if found.
For example, with '\fB\-\-fakefile ./my_fakefile\fR' the fakefile at '\fB./my_fakefile\fR' is used if found, but if it is not found then no other paths are attempted.

When piping data to this program, the piped data is treated as if it were prepended to the fakefile or the settings, depending on the operation.

A section name from the fakefile that does not conflict with an operation name may be specified when performing the make operation.
.SH OPTIONS
.TP
\fB\{+h, ++help\fR
Print the help message.
.TP
\fB+d, ++dark\fR
Output using colors that show up better on dark backgrounds
.TP
\fB+l, ++light\fR
Output using colors that show up better on light backgrounds.
.TP
\fB+n, ++no_color\fR
Do not print using color.
.TP
\fB+Q, ++quiet\fR
Decrease verbosity, silencing most output.
.TP
\fB+E, ++error\fR
Decrease verbosity, using only error output.
.TP
\fB+N, ++normal\fR
Set verbosity to normal.
.TP
\fB+V, ++verbose\fR
Increase verbosity beyond normal output.
.TP
\fB+D, ++debug\fR
Enable debugging, significantly increasing verbosity beyond normal output.
.TP
\fB+v, ++version\fR
Print only the version number.
.TP
\fB\-d, \-\-define\fR
Append an additional define after defines from settings file.
.TP
\fB\-f, \-\-fakefile\fR
Use this fakefile.
.TP
\fB\-m, \-\-mode\fR
Use this mode when processing the build settings.
.TP
\fB\-p, \-\-process\fR
Process name for storing build states.
.TP
\fB\-s, \-\-settings\fR
Use this settings file.
.TP
\fB\-b, \-\-build\fR
Specify a custom build directory.
.TP
\fB\-D, \-\-data\fR
Specify a custom path to the data files.
.TP
\fB\-S, \-\-sources\fR
Specify a custom path to the source files.
.TP
\fB\-w, \-\-work\fR
Use includes/libraries/programs from this directory instead of system.
.TP
\fB\-\-disable-doc\fR
Forcibly do not build documents files.
.TP
\fB\-\-enable-doc\fR
Forcibly do build documents files.
.TP
\fB\-\-disable-shared\fR
Forcibly do not build shared files.
.TP
\fB\-\-enable-shared\fR
Forcibly do build shared files.
.TP
\fB\-\-disable-static\fR
Forcibly do not build static files.
.TP
\fB\-\-enable-static\fR
Forcibly do build static files.
.SH OPERATIONS
.TP
\fBbuild\fR
Build or compile the code based on build settings file.
.TP
\fBclean\fR
Delete all build files.
.TP
\fBmake\fR
Build or compile the code based on fakefile (default).
.TP
\fBskeleton\fR
Build a skeleton directory structure.
.SH FAKEFILE SPECIFICATION
.PP
The fakefile file follows the \fBFSS-0005 (Somewhat Basic List)\fR format with a sub-format of \fBIKI-0002 (Simple Script)\fR.

A fakefile is broken up into multiple Basic Lists, referred to as Sections, with two special purpose reserved Sections.
The Sections are broken up into multiple Extended Objects and their respective Contents, referred to as Section Operations.

Each of these non-reserved Sections acts as a set to perform some set of Section Operations.
Each of these Section Operations perform a single command or action based on a set of reserved Section Operation types.
Each of these Section Operations have a set of Arguments associated with them.

How these Arguments are interpreted and processed are specific to each Operation type.
The Section Operations are represented by the Extended Object name and the Extended Content represents the Operation Arguments.
Each of these Section Operations support IKI variable substitution within their respective Arguments.
The Operation Extended Object does not support IKI variable substitution.
The reserved Settings Section does not support IKI variable substitution.

The \fBIKI-0002 (Simple Script)\fR vocabulary context is further clarified as follows:
  \fBcontext\fR: The value is case-sensitive variable name.
  \fBdefine\fR: The value must be a case-sensitive valid environment variable name (alpha-numeric or underscore, but no leading digits).
  \fBparameter\fR: The value is a case-sensitive variable name.
    Many parameters also support \fB:option\fR and \fB:value\fR appended at the end of the value.

The reserved Section Objects are:
  \fBsettings\fR: contains a list of Settings Objects and Content in \fBFSS-0001 (Extended)\fR format.
  \fBmain:\fR contains a list of Operation Objects and Content in \fBFSS-0001 (Extended)\fR format.

The Settings Objects are:
  \fBcompiler\fR: Only one Content, which must only be a valid filename.
  \fBdefine\fR: First Content represents variable name (case-sensitive), remaining Content represents the value.
  \fBenvironment\fR: Zero or more Content representing valid environment variable names (alpha-numeric with underscore, but cannot begin with a number).
  \fBfail\fR: Only one Content, which must be either \fBexit\fR, \fBwarn\fR or \fBignore\fR (quotes not required) (case-sensitive).
  \fBimport\fR: Only one Content, which must only be a valid filename.
  \fBindexer\fR: Only one Content, which must only be a valid filename.
  \fBindexer_arguments: Zero or more arguments supported by the indexer specified in code:\fRbuild_indexer".
  \fBload_build\fR: Only one Content, which must be either \fByes\fR or \fBno\fR (quotes not required) (case-sensitive).
  \fBparameter\fR: First Content represents variable name (case-sensitive), remaining Content represents the value.

The build settings may also be specified in the Settings Section.

The Section Operation Objects are:
  \fBand\fR: One or more Content. First Content is the condition or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the condition, etc..), remaining Content are specific to the condition.
  \fBbreak\fR: Zero or one Content. If specified, First Content must be one of \fBsuccess\fR or \fBfailure\fR.
  \fBbuild\fR: Zero or more Content. First Content represents file name of the settings file to use, second Content and on represent custom modes to use.
  \fBclean\fR: Zero Content.
  \fBclone\fR: Two or more Content representing paths to files.
  \fBcompile\fR: One or more Content as parameters to compiler.
  \fBcopy\fR: Two or more Content representing paths to files.
  \fBdefine\fR: First Content represents variable name (case-sensitive), remaining Content represents the value.
  \fBdelete\fR: One or more Content representing paths to files.
  \fBdeletes\fR: One or more Content representing paths to files.
  \fBelse\fR: Zero Content.
  \fBexit\fR: Zero or one Content. If specified, first Content must be one of \fBsucceed\fR or \fBfail\fR.
  \fBfail\fR: One Content. First Content must be one of \fBexit\fR, \fBwarn\fR, or \fBignore\fR (case-sensitive).
  \fBgroup\fR: Two or more Content. First Content is group name, number, or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the group name or number, etc..), remaining Content are paths to files.
  \fBgroups\fR: Two or more Content. First Content is group name, number, or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the group name or number, etc..), remaining Content are paths to files.
  \fBif\fR: One or more Content. First Content is the condition or is \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the condition, etc..), remaining Content are specific to the condition.
  \fBindex\fR: One or more Content.
  \fBlink\fR: Two to Four Content. The first and second Content may be either \fBforce\fR or \fBstrict\fR, the second to last Content is the link target file, and the last Content is the pointer file (the link).
  \fBmode\fR: Two or more Content. First Content is the mode, remaining Content are paths to files.
  \fBmodes\fR: Two or more Content. First Content is the mode, remaining Content are paths to files.
  \fBmove\fR: Two or more Content representing paths to files.
  \fBoperate\fR: One Content. First Content is the name of a valid Section Object, except for the reserved Section Objects.
  \fBor\fR: One or more Content. First Content is the condition or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the condition, etc..), remaining Content are specific to the condition.
  \fBowner\fR: Two or more Content. First Content is owner name, number, or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the owner name or number, etc..), remaining Content are paths to files.
  \fBowners\fR: Two or more Content. First Content is owner name, number, or \fBno_dereference\fR (when \fBno_dereference\fR, then the second Content is the owner name or number, etc..), remaining Content are paths to files.
  \fBparameter\fR: First Content represents variable name (case-sensitive), remaining Content represents the value.
  \fBpop\fR: Zero Content.
  \fBprint\fR: Zero or more Content.
  \fBrun\fR: One or more Content. First Content is the name of the program (or script) and all remaining Content are passed as arguments to the named program (or script).
  \fBshell\fR: One or more Content. First Content is the file path of the program (or script) and all remaining Content are passed as arguments to the named program (or script).
  \fBskeleton\fR: Zero Content.
  \fBto\fR: One Content. First Content is the directory path.
  \fBtop\fR: Zero Content.
  \fBtouch\fR: Two or more Content. First Content is one of \fBfile\fR or \fBdirectory\fR, remaining Content are paths to files.
  \fBwrite\fR: One or more Content. First Content the file to write to, remaining Content represent the string to write.

  The \fBif\fR Section Operation conditions are:
    \fB==\fR: Two or more Content.
    \fB>\fR: Two or more Content.
    \fB<\fR: Two or more Content.
    \fB>=\fR: Two or more Content.
    \fB<=\fR: Two or more Content.
    \fB<>\fR: Two or more Content.
    \fBdefine\fR: One or more Content are valid environment variable name.
    \fBexist\fR: One or more Content representing the files to check the existence of.
    \fBfailure\fR: has no other Content.
    \fBgroup\fR: First Content is the name of a group. Second or more Content are paths to files.
    \fBis\fR: First Content is a list of \fBblock\fR, \fBcharacter\fR, \fBno_dereference\fR, \fBdirectory\fR, \fBfifo\fR, \fBlink\fR, \fBregular\fR , or \fBsocket\fR followed by "for" and then the remaining Content that are paths to files.
    \fBmode\fR: First Content is either \fBhas\fR, \fBis\fR, or \fBno_dereference\fR. Second Content is a valid file mode. Third or more Content are paths to files.
    \fBno_dereference\fR: A non-condition inserted before any of \fBexist\fR, \fBis\fR, and \fBmode\fR (then the second Content is the actual condition followed by any Content associated with that condition).
    \fBnot\fR: First Content is one of \fBdefine\fR, \fBexist\fR, \fBgroup\fR, \fBis\fR, \fBmode\fR, \fBno_dereference\fR, \fBowner\fR, or \fBparameter\fR and all remaining Content are based on the first Content's \fBif\fR Section Operation Content rules.
    \fBowner\fR: First Content is the name of an owner. Second or more Content are paths to files.
    \fBparameter\fR: One or more Content are valid IKI names.
    \fBsuccess\fR: has no other Content.

The \fBif\fR Section Operation conditions and numbers:
  The numbers may be represented in any of the forms:
    \fBdecimal\fR: all numbers without a base-type prefix are of base-type 10, referred to as decimal.
    \fBbinary\fR: all numbers with the prefix \fB0b\fR (uppercase or lowercase \fBb\fR) are of base-type 2, referred to as binary.
    \fBoctal\fR: all numbers with the prefix \fB0o\fR (that is zero followed by the letter \fBo\fR, uppercase or lowercase \fBo\fR) are of base-type 8, referred to as octal.
    \fBduodecimal\fR: all numbers with the prefix \fB0d\fR (uppercase or lowercase \fBd\fR) are of base-type 12, referred to as duodecimal.
    \fBhexadecimal\fR: all numbers with the prefix \fB0x\fR (uppercase or lowercase \fBx\fR) are of base-type 16, referred to as hexadecimal.

  (At this time) The numbers may be of a max value of 2^64, or 18446744073709551615, positive or negative.
  (At this time) The numbers may only be whole numbers.
  Note: There are plans to impose no limits on the number size or any decimal values, but this requires significant work is not to be implemented at this time.
  Once this restriction is lifted, it should be conditional upon an implementation for what the maximum supported numbers or digits may be.

  Only the following \fBif\fR Section Operation conditions use these operators:
    \fB>\fR
    \fB<\fR
    \fB>=\fR
    \fB<=\fR

The \fBif\fR Section Operation condition \fBparameter\fR:
  The following reserved words are available for parameter names: \fBbuild\fR, \fBcolor\fR, \fBcurrent\fR, \fBdata\fR, \fBdefine\fR, \fBfakefile\fR, \fBmode\fR, \fBprocess\fR, \fBreturn\fR, \fBsettings\fR, \fBsources\fR, \fBtop\fR, \fBverbosity\fR, and \fBwork\fR.
  Each of the reserved words supports having \fB:option\fR and \fB:value\fR appended, such as: \fBwork:value\fR.
Fakefile Specification:
.SH SETTINGS SPECIFICATION
.PP
This describes intent and purposes of the build settings file settings.
The settings file is designed for very simple compilations that represent a single named program and/or a single named library.
For specific details on the allowed formatting, see the settings.txt under the specifications folder.

\fBbuild_compiler\fR:
  This represents the name of the compiler program to use, such as \fBgcc\fR.

  This defaults to \fBgcc\fR (the GNU C Compiler).

  The programs \fBgcc\fR and \fBclang\fR are known to work.
  Many of the parameters in the settings file can be changed if not using GCC, but there may be certain hard-coded functionality that may need to be changed.

\fBbuild_indexer\fR:
  This represents the name of the indexer program to use, such as \fBar\fR.
  An indexer is often called a linker.

  This defaults to \fBar\fR (the GNU \fBar\fR program).
  Similar to \fBbuild_compiler\fR, any linker that supports the \fBar\fR program parameters is effectively supported.

\fBbuild_indexer_arguments\fR:
  This represents arguments needed to build an archive file from object files, such as \fBrcs\fR.
  These arguments are placed immediately before the object files passed to the \fBindexer\fR program.

\fBbuild_language\fR:
  The programming language to build with.
  The languages \fBc\fR and \fBc++\fR are supported (with \fBbash\fR as a consideration for support).
  The \fBbash\fR language is not currently implemented and needs some consideration because there is nothing to compile.
  The \fBbash\fR language will likely build a set of individual scripts, and perhaps script dependencies, into a single Bash script.

\fBbuild_libraries\fR:
  A collection of libraries to be linked against.
  This should include the compiler specific parameter parts, such as the \fB-l\fR prefix in \fB-lc\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.

\fBbuild_libraries_shared\fR:
  A collection of libraries to be linked against.
  This should include the compiler specific parameter parts, such as the \fB-l\fR prefix in \fB-lc\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only shared builds.

\fBbuild_libraries_static\fR:
  A collection of libraries to be linked against.
  This should include the compiler specific parameter parts, such as the \fB-l\fR prefix in \fB-lc\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only static builds.

\fBbuild_objects_library\fR:
  A collection of object files to be compile with when building libraries.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_script\fR, \fBpath_object_shared\fR, or \fBpath_object_static\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.

\fBbuild_objects_library_shared\fR:
  A collection of object files to be compile with when building shared libraries.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_shared\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only shared builds.

\fBbuild_objects_library_static\fR:
  A collection of object files to be compile with when building static libraries.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_static\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only static builds.

\fBbuild_objects_program\fR:
  A collection of object files to be compile with when building programs.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_script\fR, \fBpath_object_shared\fR, or \fBpath_object_static\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.

\fBbuild_objects_program_shared\fR:
  A collection of object files to be compile with when building shared programs.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_shared\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only shared builds.

\fBbuild_objects_program_static\fR:
  A collection of object files to be compile with when building static programs.
  These are intended to represent already compiled object files.
  These paths are relative to the \fBpath_object_static\fR.
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only static builds.

\fBbuild_name\fR:
  The name of the build, which often represent the project name.
  If program sources are specified, then this will be used as the program name.
  If library sources are specified, then this will be used in the library name, such as \fBlibX.so\fR where \fBX\fR would be the \fBbuild_name\fR value.

\fBbuild_script\fR:
  When \fByes\fR, the build process will build any scripts, such as a Bash script.

  This is neither implemented nor supported by Featureless Make 0.6.x and earlier.

\fBbuild_shared\fR:
  When \fByes\fR, the build process will compile any source code for any supported language that supports shared library linking.

\fBbuild_sources_documentation\fR:
  A collection of documentation files.
  These are documentation files used by the project and are simply copied over to the build directory.
  Unless a pre-process script (or in theory post-process script) is configured to alter these, they are not modified.

\fBbuild_sources_headers\fR:
  A collection of header files.
  May include a relative sub-path to each individual header (such as: \fBlevel_0/a.h level_0/b.h level_1/c.h\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.

\fBbuild_sources_headers_shared\fR:
  A collection of header files.
  May include a relative sub-path to each individual header (such as: \fBlevel_0/a.h level_0/b.h level_1/c.h\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  Be careful not to have any conflicting names between this and build_sources_headers_static in case of when static and shared builds are both enabled.
  These are applied to only shared builds.

\fBbuild_sources_headers_static\fR:
  A collection of header files.
  May include a relative sub-path to each individual header (such as: \fBlevel_0/a.h level_0/b.h level_1/c.h\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These files are used when compiling the library.
  Be careful not to have any conflicting names between this and build_sources_headers_shared in case of when static and shared builds are both enabled.
  These are applied to only static builds.

\fBbuild_sources_library\fR:
  A collection of library related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.

\fBbuild_sources_library_shared\fR:
  A collection of library related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only shared builds.

\fBbuild_sources_library_static\fR:
  A collection of library related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These are applied to only static builds.

\fBbuild_sources_object\fR:
  A single source file used for generating an object file.
  The source file is located within the path designated by \fBpath_sources_object\fR.
  The built object does not get linked and therefore no linker arguments apply.
  The built object file is named using the \fBbuild_name\fR with the \fB.o\fR extension.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c\fR).

\fBbuild_sources_object_shared\fR:
  A single source file used for generating an object file.
  The source file is located within the path designated by \fBpath_sources_object\fR.
  The built object does not get linked and therefore no linker arguments apply.
  The built object file is named using the \fBbuild_name\fR with the \fB.o\fR extension.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c\fR).
  These are applied to only shared builds.

\fBbuild_sources_object_static\fR:
  A single source file used for generating an object file.
  The source file is located within the path designated by \fBpath_sources_object\fR.
  The built object does not get linked and therefore no linker arguments apply.
  The built object file is named using the \fBbuild_name\fR with the \fB.o\fR extension.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c\fR).
  These are applied to only static builds.

\fBbuild_sources_program\fR:
  A collection of program related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These files are used when compiling the program.

\fBbuild_sources_program_shared\fR:
  A collection of program related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These files are used when compiling the program for shared builds.

\fBbuild_sources_program_static\fR:
  A collection of program related source files.
  May include a relative sub-path to each individual source file (such as: \fBlevel_0/a.c level_0/b.c level_1/c.c\fR).
  The order of these may matter if the compiler (such as GCC or a linker via GCC) is order sensitive.
  These files are used when compiling the program for static builds.

\fBbuild_sources_script\fR:
  A collection of script files.
  These are script files used by the project and are simply copied over to the build directory.
  Unless a pre-process script (or in theory post-process script) is configured to alter these, they are not modified.
  Unlike the \fBcompile_language\fR setting \fBbash\fR, this is not for built Bash script, but is instead for any valid scripting language (including Bash).
  These could be in any language.

\fBbuild_sources_setting\fR:
  A collection of settings files.
  These are settings files used by the project and are simply copied over to the build directory.
  Unless a pre-process script (or in theory post-process script) is configured to alter these, they are not modified.

\fBbuild_static\fR:
  When \fByes\fR, the build process will compile any source code for any supported language that supports static library linking.

\fBdefines\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to both shared and static builds.

\fBdefines_library\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only library builds.

\fBdefines_library_shared\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only shared library builds.

\fBdefines_library_static\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only static library builds.

\fBdefines_object\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only object builds.

\fBdefines_object_shared\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only shared object builds.

\fBdefines_object_static\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only static object builds.

\fBdefines_program\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only program builds.

\fBdefines_program_shared\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only shared program builds.

\fBdefines_program_static\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only shared program builds.

\fBdefines_shared\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only shared builds.

\fBdefines_static\fR:
  A collection of macro names.
  This includes the any compiler specific parameters required by the \fBbuild_compiler\fR, such as the \fB-D\fR used by \fBgcc\fR and \fBclang\fR.
  These will be appended to the compiler for compiled languages such as \fBC\fR and \fBC++\fR.
  These are applied to only static builds.

\fBenvironment\fR:
  A collection of environment names to pass from the callers environment into the executed programs environment.
  When provided, all environment variables are removed when calling user-space programs, such as \fBgcc\fR.
  To remove all environment variables define this with no Content.
  When not provided, all environment variables are loaded.

\fBflags\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to both shared and static builds.

\fBflags_library\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied when building a library.

\fBflags_library_shared\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only library shared builds.

\fBflags_library_static\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only library static builds.

\fBflags_object\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied when building an object.

\fBflags_object_shared\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only object shared builds.

\fBflags_object_static\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only object static builds.

\fBflags_program\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied when building a program.

\fBflags_program_shared\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only program shared builds.

\fBflags_program_static\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only program static builds.

\fBflags_shared\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only shared builds.

\fBflags_static\fR:
  A collection of any flag supported by the \fBbuild_compiler\fR, such as \fBgcc\fR.
  This includes the any compiler specific parameters to defined this, such as the \fB-f\fR used by \fBgcc\fR and \fBclang\fR.
  These are applied to only static builds.

\fBhas_path_standard\fR:
  When \fByes\fR, the sources path will be built using the sources path with the language, such as \fBsources/c/\fR.
  When \fBno\fR, the default sources path structure is not used and instead \fBpath_sources\fR is used.
  When the parameter \fB-S/--sources\fR is specified, such as \fB-S xxx\fR, then when this is set to \fByes\fR is used then the path would be \fBxxx/c/\fR and when this is set to \fBno\fR then the path would be \fBxxx/\fR.

  This defaults to \fByes\fR.

\fBimport\fR:
  Load this settings file at this point in the settings file.
  This can be an absolute or a relative path.
  This is intended to reduce repition and likely should be placed at the top of the settings file.
  This a non-recursive operation and the imported file itself cannot perform an import.
  Loaded values are processed as if they are in the file at the spot where the import setting is specified.
  Relative paths are relative to the importing file.
  Absolute paths that start with "./" are relative to the project root rather than the importing file.
  Absolute paths that start with "/" are treated normally.

  This is neither implemented nor supported by Featureless Make 0.6.x and earlier.

\fBmodes\fR:
  A collection of available build modes.
  Build modes provide custom variants of the build process where certain settings are appended onto others.
  See the settings.txt specification for a list of which setting names this applies to.

\fBmodes_default\fR:
  The name of the default mode to use when no mode is specified.
  This must be one of the modes specified in the \fBmodes\fR setting.

\fBpath_headers\fR:
  A sub-path in which headers are to be installed under.
  For example, the Featureless Linux Library project might use the \fBlevel_0\fR, \fBlevel_1\fR, etc.. headers without requiring that structure within the source.
  A resulting build destination for a \fBpath_headers\fR of \fBlevel_0\fR would be something like \fBbuild/includes/level_0/\fR.
  If \fBpath_headers\fR is \fBlevel_0\fR, \fBpreserve_path_headers\fR is \fByes\fR, and \fBbuild_sources_headers\fR has \fBxxx/a.h yyy/zzz/b.h\fR, then the headers would be at: \fBbuild/includes/level_0/xxx/a.h build/includes/level_0/yyy/zzz/b.h\fR

\fBpath_language\fR:
  A sub-path in which to find the source files for the currently defined language.
  If the \fBbuild_language\fR is changed, it is recommended to change this as well to match.

\fBpath_library_script\fR:
  A sub-path representing the destination where the built library script files are placed.

  This defaults to \fBscript\fR.

  This is neither implemented nor supported by Featureless Make 0.6.x and earlier.

\fBpath_library_shared\fR:
  A sub-path representing the destination where the built shared library files are placed.

  This defaults to \fBshared\fR.

\fBpath_library_static\fR:
  A sub-path representing the destination where the built shared library files are placed.

  This defaults to \fBstatic\fR.

\fBpath_object_script\fR:
  A sub-path representing the destination where the built object script files are placed.

  This defaults to \fBscript\fR.

  This is neither implemented nor supported by Featureless Make 0.6.x and earlier.

\fBpath_object_shared\fR:
  A sub-path representing the destination where the built object library files are placed.

  This defaults to \fBshared\fR.

\fBpath_object_static\fR:
  A sub-path representing the destination where the built object library files are placed.

  This defaults to \fBstatic\fR.

\fBpath_program_script\fR:
  A sub-path representing the destination where the built program script files are placed.

  This defaults to \fBscript\fR.

  This is neither implemented nor supported by Featureless Make 0.6.x and earlier.

\fBpath_program_shared\fR:
  A sub-path representing the destination where the built shared program files are placed.

  This defaults to \fBshared\fR.

\fBpath_program_static\fR:
  A sub-path representing the destination where built shared program files are placed.

  This defaults to \fBstatic\fR.

\fBpath_sources\fR:
  A sub-path representing where the source files are found.

  This defaults to \fBsources\fR.

\fBpath_sources_object\fR:
  A sub-path representing where the object source files are found.
  This is used by \fBbuild_sources_object\fR.

  This defaults to \fBsources\fR.

\fBpreserve_path_headers\fR:
  When this is \fByes\fR, then the relative directory structure in the source (as defined in \fBbuild_sources_headers\fR) is preserved.
  If the \fBbuild_sources_headers\fR has the header files \fBxxx/a.h yyy/zzz/b.h\fR and this is \fByes\fR, then the directories \fBxxx/\fR and \fByyy/zzz/\fR are created and the files are stored within them.
  If the \fBbuild_sources_headers\fR has the header files \fBxxx/a.h yyy/zzz/b.h\fR and this is \fBno\fR, then the directories \fBxxx/\fR and \fByyy/zzz/\fR are stripped before installing.
  When this is \fBno\fR and the \fBbuild_sources_headers\fR has header files \fBxxx/a.h yyy/a.h\fR, then one of the \fBa.h\fR files will be overwritten, depending on order they were supplied.

\fBprocess_post\fR:
  The filename (relative to the data/build/ directory) of a script to execute after the \fBbuild\fR operation successfully completes.
  A small subset of parameters from the main execution are passed to this script during execution as parameters (using short parameter codes):
    Color context parameters, such as: \fB+l\fR, \fB+n\fR, and \fB+d\fR.
    Operation mode, such as: \fBbuild\fR, \fBclean\fR, \fBmake\fR, or \fBskeleton\fR.
    Verbosity parameters, such as: \fB+q\fR, \fB+D\fR, or \fB+V\fR.
    Define parameters, such as \fB-d X\fR or \fB-d Y\fR, whereas \fBX\fR or \fBY\fR are any valid argument associated with \fB-d\fR.
    Process parameter, such as \fB-p X\fR, whereas \fBX\fR is any valid argument associated with \fB-p\fR.
    Settings parameter, such as \fB-s X', whereas code:\fRX" is any valid argument associated with \fB-s\fR.
    Build Path parameter, such as \fB-b X', whereas code:\fRX" is any valid argument associated with \fB-b\fR.
    Data Path parameter, such as \fB-D X', whereas code:\fRX" is any valid argument associated with \fB-D\fR.
    Sources Path parameter, such as \fB-S X', whereas code:\fRX" is any valid argument associated with \fB-S\fR.
    Work Path parameter, such as \fB-w X', whereas code:\fRX" is any valid argument associated with \fB-w\fR.

\fBprocess_pre\fR:
  The filename (relative to the data/build/ directory) of a script to execute before the \fBbuild\fR operation is executed.
  A small subset of parameters from the main execution are passed to this script during execution as parameters (using short parameter codes):
    Color context parameters, such as: \fB+l\fR, \fB+n\fR, and \fB+d\fR.
    Operation mode, such as: \fBbuild\fR, \fBclean\fR, \fBmake\fR, or \fBskeleton\fR.
    Verbosity parameters, such as: \fB+q\fR, \fB+D\fR, or \fB+V\fR.
    Define parameters, such as \fB-d X\fR or \fB-d Y\fR, whereas \fBX\fR or \fBY\fR are any valid argument associated with \fB-d\fR.
    Process parameter, such as \fB-p X\fR, whereas \fBX\fR is any valid argument associated with \fB-p\fR.
    Settings parameter, such as \fB-s X', whereas code:\fRX" is any valid argument associated with \fB-s\fR.
    Build Path parameter, such as \fB-b X', whereas code:\fRX" is any valid argument associated with \fB-b\fR.
    Data Path parameter, such as \fB-D X', whereas code:\fRX" is any valid argument associated with \fB-D\fR.
    Sources Path parameter, such as \fB-S X', whereas code:\fRX" is any valid argument associated with \fB-S\fR.
    Work Path parameter, such as \fB-w X', whereas code:\fRX" is any valid argument associated with \fB-w\fR.

\fBsearch_exclusive\fR:
  When \fByes\fR, the search path during compile for shared libraries will only include shared library paths.
  When \fBno\fR, the search path during compile time for shared libraries will include shared library paths followed by static library paths.
  Setting this to \fByes\fR helps prevent static libraries from ending up in shared libraries (very useful when bootstrapping a system).
  Setting this to \fBno\fR allows for including static libraries if no shared libraries are found but static are.
  This does not alter search paths introduced automatically by the \fBbuild_compiler\fR or \fBbuild_indexer\fR, so it is still possible for static libraries to end up even when this is set to \fByes\fR.

\fBsearch_shared\fR:
  When \fByes\fR, shared library paths are searched during compile.
  Both this and \fBsearch_static\fR cannot be \fBno\fR at the same time.

  This defaults to \fByes\fR.

\fBsearch_shared\fR:
  When \fByes\fR, static library paths are searched during compile.
  Both this and search_shared cannot be \fBno\fR at the same time.

\fBversion_file\fR:
  Designates which version should be used when building the symbolic links.
  Any version prefixes are used as defined.
  A Symbolic link is created against this created file such that \fBlibX.so\fR is a link to \fBlibX.so.A\fR.
  For all files other than when file is \fBmajor\fR, another symbolic link is created against this such that \fBlibX.so.A\fR is a link to \fBlibX.so.A.X\fR such that X is the respective \fBB\fR, \fBB.C', or code:\fRB.C.D" as described below.
  The default file is \fBmajor\fR.
  When \fBmajor\fR is used, the file created is \fBlibX.so.A\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA\fR is the major version.
  When \fBminor\fR is used, the file created is \fBlibX.so.A.B\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B\fR is the major and minor versions, respectively.
  When \fBmicro\fR is used, the file created is \fBlibX.so.A.B.C\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B.C\fR is the major, minor, and micro versions, respectively.
  When \fBnano\fR is used, the file created is \fBlibX.so.A.B.C.D\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B.C.D\fR is the major, minor, micro, and nano versions, respectively.

\fBversion_major\fR:
  The major version number (or in theory any characters allowed in a filename).
  This should generally be a positive number or 0.
  Anything else is currently untested but allowed.
  With a structure of \fBA.B.C\fR, the major version would be the \fBA\fR.

\fBversion_major_prefix\fR:
  The version major prefix is the character used to designate the start of the major version.
  This can zero or more characters.
  With a structure of \fBA.B.C\fR, the major version prefix would be before the \fBA\fR.
  This is only added if \fBversion_major\fR is not empty.

  This defaults to the ASCII period character \fB.\fR.

\fBversion_minor\fR:
  The minor version number (or in theory any characters allowed in a filename).
  This should generally be a positive number or 0.
  Anything else is currently untested but allowed.
  With a structure of \fBA.B.C\fR, the minor version would be the \fBB\fR.

\fBversion_minor_prefix\fR:
  The version minor prefix is the character used to separate the major from the minor.
  This can zero or more characters.
  With a structure of \fBA.B.C\fR, the minor version prefix would be the \fB.\fR before the \fBB\fR.
  This is only added if \fBversion_minor\fR is not empty.

  This defaults to the ASCII period character \fB.\fR.

\fBversion_micro\fR:
  The micro version number (or in theory any characters allowed in a filename).
  This should generally be a positive number or 0.
  Anything else is currently untested but allowed.
  With a structure of \fBA.B.C\fR, the micro version would be the \fBC\fR.

\fBversion_micro_prefix\fR:
  The version micro prefix is the character used to separate the minor from the micro.
  This can zero or more characters.
  With a structure of \fBA.B.C\fR, the micro version prefix would be the \fB.\fR before the \fBC\fR.
  This is only added if \fBversion_micro\fR is not empty.

  This defaults to the ASCII period character \fB.\fR.

\fBversion_nano\fR:
  The nano version number (or in theory any characters allowed in a filename).
  This should generally be a positive number or 0.
  Anything else is currently untested but allowed.
  With a structure of \fBA.B.C.D\fR, the micro version prefix would be the \fB.\fR before the \fBD\fR.

\fBversion_nano_prefix\fR:
  The version nano prefix is the character used to separate the micro from the nano.
  This can zero or more characters.
  With a structure of \fBA.B.C.D\fR, the minor version would be the \fB.\fR before the \fBD\fR.
  This is only added if \fBversion_nano\fR is not empty.

  This defaults to the ASCII period character \fB.\fR.

\fBversion_target\fR:
  Designates which version should be used when linking the shared library.
  Any version prefixes are used as defined.
  The default target is \fBmicro\fR.
  When \fBmajor\fR is used, a shared library is generated with \fB-Wl,-soname,libX.so.A\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA\fR is the major version.
  When \fBminor\fR is used, a shared library is generated with \fB-Wl,-soname,libX.so.A.B\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B\fR is the major and minor versions, respectively.
  When \fBmicro\fR is used, a shared library is generated with \fB-Wl,-soname,libX.so.A.B.C\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B.C\fR is the major, minor, and micro versions, respectively.
  When \fBnano\fR is used, a shared library is generated with \fB-Wl,-soname,libX.so.A.B.C.D\fR, whereas \fBX\fR is the \fBbuild_name\fR and \fBA.B.C.D\fR is the major, minor, micro, and nano versions, respectively.
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
