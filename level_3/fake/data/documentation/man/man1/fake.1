.TH FAKE "1" "April 2023" "FLL - Featureless Make 0.6.7" "Program Manual"
.SH NAME
fake \- Build or compile software similar to GNU Make.
.SH SYNOPSIS
.B fake
[\fI\,OPTIONS\/\fR] [\fI\,OPERATIONS\/\fR]
.SH DESCRIPTION
.PP
The Featureless Make program, called \fBfake\fR, is a replacement to the GNU Make program.
A goal of this program is to provide a simpler and more human-friendly syntax than that of GNU Make.
Programs like \fBautoconf\fR and \fBautomake\fR should not be needed.

This program has a \fBfakefile\fR rather than having a \fBMakefile\fR.
In addition, there is a \fBsettings\fR file that utilizes hard-coded functionality to simplify common compilation processes such as with programming languages like C and C++.
The use of a \fBsettings\fR file can greatly simplify or even obviate the need for a \fBfakefile\fR in some limited cases.

The default operation, called the \fBmake\fB operation, operates against this \fBfakefile\fR.
The \fBbuild\fR operation utilizes the \fBsettings\fR file.

When performing the build operation, the \fB\-\-mode\fR parameter specifies a name (limited to alpha-numeric, underscore, and dash) to be used in addition to the global.
For example, when a mode of '\fBfll_monolithic\fR' is specified, build libraries from both '\fBbuild_libraries\fR' and '\fBbuild_libraries\-fll_monolithic\fR' are used (but not '\fBbuild_libraries\-fll_level\fR').

When specifying the fakefile or the settings parameters, the project root is seached first and then the build data director is searched when the given file does not contain a directory separator.
For example, with '\fB\-\-fakefile my_fakefile\fR' the fakefile at '\fB./my_fakefile\fR' is used if found, but if it is not found then '\fB./data/build/my_fakefile\fR' is used if found.
For example, with '\fB\-\-fakefile ./my_fakefile\fR' the fakefile at '\fB./my_fakefile\fR' is used if found, but if it is not found then no other paths are attempted.

When piping data to this program, the piped data is treated as if it were prepended to the fakefile or the settings, depending on the operation.

A section name from the fakefile that does not conflict with an operation name may be specified when performing the make operation.
.SH OPTIONS
.TP
\fB\{\-h, \-\-help\fR
Print the help message.
.TP
\fB+C, ++copyright\fR
Print the copyright.
.TP
\fB+d, ++dark\fR
Output using colors that show up better on dark backgrounds.
.TP
\fB+l, ++light\fR
Output using colors that show up better on light backgrounds.
.TP
\fB+n, ++no_color\fR
Do not print using color.
.TP
\fB+Q, ++quiet\fR
Decrease verbosity, silencing most output.
.TP
\fB+E, ++error\fR
Decrease verbosity, using only error output.
.TP
\fB+N, ++normal\fR
Set verbosity to normal.
.TP
\fB+V, ++verbose\fR
Increase verbosity beyond normal output.
.TP
\fB+D, ++debug\fR
Enable debugging, significantly increasing verbosity beyond normal output.
.TP
\fB+v, ++version\fR
Print only the version number.
.TP
\fB\-d, \-\-define\fR
Append an additional define after defines from settings file.
.TP
\fB\-f, \-\-fakefile\fR
Use this fakefile.
.TP
\fB\-m, \-\-mode\fR
Use this mode when processing the build settings.
.TP
\fB\-p, \-\-process\fR
Process name for storing build states.
.TP
\fB\-s, \-\-settings\fR
Use this settings file.
.TP
\fB\-b, \-\-build\fR
Specify a custom build directory.
.TP
\fB\-D, \-\-data\fR
Specify a custom path to the data files.
.TP
\fB\-S, \-\-sources\fR
Specify a custom path to the source files.
.TP
\fB\-w, \-\-work\fR
Use includes/libraries/programs from this directory instead of system.
.TP
\fB\-\-disable-doc\fR
Forcibly do not build documents files.
.TP
\fB\-\-enable-doc\fR
Forcibly do build documents files.
.TP
\fB\-\-disable-shared\fR
Forcibly do not build shared files.
.TP
\fB\-\-enable-shared\fR
Forcibly do build shared files.
.TP
\fB\-\-disable-static\fR
Forcibly do not build static files.
.TP
\fB\-\-enable-static\fR
Forcibly do build static files.
.SH OPERATIONS
.TP
\fBbuild\fR
Build or compile the code based on build settings file.
.TP
\fBclean\fR
Delete all build files.
.TP
\fBmake\fR
Build or compile the code based on fakefile (default).
.TP
\fBskeleton\fR
Build a skeleton directory structure.
.SH SEE ALSO
.PP
\fBfake-defines\fR(5),
\fBfake-dependencies\fR(5),
\fBfake-fakefile\fR(5),
\fBfake-settings\fR(5)
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, GNU LGPL Version 2.1 or later.
