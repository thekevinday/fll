# fss-0002

Fakefile Documentation:
  This describes intent and purposes of the fakefile file settings.
  For specific details on the allowed formatting, see the fakefile.txt under the specifications folder.

  All files specified are relative to the project root.

  The reserved Section Names are defined as follows\:
  - settings\:
    Any configuration specific to this fakefile is stored here.
    This includes the declaration of define and parameter IKI variable substitution values.

    The build settings may also be specified in the Settings Section.

    The following settings are available (in addition to the build settings)\:
    - archiver\:
      This represents the name of the linker program to use, such as "ar".

      When specified and "load_build" is "true", then this will override the "build_linker" specified in the loaded build settings.

    - compiler\:
      This represents the name of the compiler program to use, such as "gcc".

      When specified and "load_build" is "true", then this will override the "build_compiler" specified in the loaded build settings.

    - define\:
      This represents an environment variable to define on run.
      The environment variable name is case-sensitive.
      This replaces the value of any existing environment variable with this name.

    - environment\:
      This represents all environment variables that are exposed when executing sub-programs.
      This is not auto-populated for environment variables defined in the "define" setting.

      When defined with no Content, then this means that no environment variables are exposed.
      Environment variables may still be exposed if "load_build" is "true" and the build setting file defines any environment variable names.

    - fail\:
      Designates the fail mode when running external programs, such as through the "run" or "shell" operations.

      There are three options:
      - exit: Designates to exit the program on failure, printing an error message.
      - warn: Designates to continue on and if in verbose mode then print a warning.
      - ignore: Designates to do nothing.

      The return code for programs can still be retrieved through using the reserved iki vaiable "return".

    - load_build\:
      This represents whether or not to load the load the build settings file.
      The first Content value may be "true" to load the build settings and "false" to not load the build settings file.

    - parameter\:
      This defines an IKI variable name to substitute with the value.
      This replaces the value of any existing environment variable with this name.

      The first Content value represents the IKI variable name.
      All Content values after the first represent the values the matching IKI variable is replaced with.

      The parameter variable name "return" is used to store the return result of an "run" or "shell" operation.
      Setting this here only sets the default "return" parameter variable value.

  - main\:
    This is the main entry point when processing the fakefile.
    This is processed top-down until the end of the list is reached.

    The following operations are available\:
    - archive\:
      Execute the linker program, such as "ar".
      This uses "archive" instead of "link" to avoid confusion between this and generating a symbolic link to some file.

      All Content are passed as arguments to the respective "ar" program.

    - build\:
      Run the fake build operation as if "fake build" was run instead of "fake make".
      Command line arguments are automatically passed to the fake build operation.

      Accepts an optional Content that is a path to a build settings file to use instead of the default.

    - break\:
      Perform an exit from the current make operation.
      This only exists the current depth.
      If the depth is at the top (aka: 0), then this is identical to the "exit" section operation.
      The second Content may be either 'succeed' or 'fail' to designate on whether or not to exit as success or failure.
      When set to "failure" this will trigger any failure (with message), depending on the current fail state.

    - clean\:
      Run the fake clean operation as if "fake clean" was run instead of "fake make".
      Command line arguments are automatically passed to the fake build operation.

    - compile\:
      Execute the compiler program, such as "gcc".

      All Content are passed as arguments to the respective "gcc" program.

    - define\:
      This represents an environment variable to define on run.
      The environment variable name is case-sensitive.
      This replaces the value of any existing environment variable with this name.

    - delete\:
      Delete one or more files or directories.

      All Content must be the file or directory to be deleted.

      If the path is a directory and is not empty, then this will not delete the directory.

    - deletes\:
      Identical to "delete", except that when the path is a directory and is not empty, then this will delete the directory.

    - else\:
      Performs a programmatic "else" condition.
      Must be specified following a valid if operation (and the operation it affects).

      This has no Content.

      An else operation may not follow this.
      An if operation may immediately follow to represent an "else if" condition.

    - exit\:
      Perform an exit from the entire make operation.
      This always exits completely, regardless of the operation depth.
      The second Content may be either 'success' or 'failure' to designate on whether or not to exit as success or failure.

      When set to "failure" this will trigger a failure message.
      When set to "failure", the fail state will be forcibly changed to "fail" regardless of the currrent fail state.

    - fail\:
      Toggle how the to handle an operation failure.

      The first Content may be one of the following\:
        exit: Set failure handler to exit on failure.
        warn: Set failure handler to print a warning on failure but continue on.
        ignore: Set failure handler to continue on regardless of failure.

    - group\:
      Change the group role for a given file.

      The first Content represents the group to assign.
      The second Content represents the file to assign the group to.

    - groups\:
      Identical to group operation, except this will recursively apply the mode to all files within the given file, if that file is a directory file path.

    - if\:
      Performs a programmatic "if" condition.
      May be specified following a valid "else" operation.

      The Content represents a set of conditions to perform.

      conditions\:
        == "left" "right"\:
          compare all parameters to be equal.
          requires 2 or more after the "==".
          for example, "if == 'a' 'b' 'c' 'd'" would test: 'a' == 'b' && 'b' == 'c' && 'c' == 'd'.
          this performs only string-based comparisons.

        > "left string" "right string"\:
          compare "left" to "right" for greater than.
          requires 2 or more after the ">".
          for example, "if > 0 1 2 3" would test: 0 > 1 && 1 > 2 && 2 > 3.
          this performs only number-based comparisons.

        < "left string" "right string"\:
          compare "left" to "right" for less than.
          requires 2 or more after the ">".
          for example, "if < 0 1 2 3" would test: 0 < 1 && 1 < 2 && 2 < 3.
          this performs only number-based comparisons.

        >= "left string" "right string"\:
          compare "left" to "right" for greater than or equal to.
          requires 2 or more after the ">=".
          for example, "if >= 0 1 2 3" would test: 0 >= 1 && 1 >= 2 && 2 >= 3.
          this performs only number-based comparisons.

        <= "left string" "right string"\:
          compare "left" to "right" for less than or equal to.
          requires 2 or more after the ">=".
          for example, "if <= 0 1 2 3" would test: 0 <= 1 && 1 <= 2 && 2 <= 3.
          this performs only number-based comparisons.

        <> "left" "right"\:
          compare all parameters to be not equal.
          requires 2 or more after the "==".
          for example, "if <> 'a' 'b' 'c'" would test: 'a' <> 'b' && 'b' <> 'c' && 'a' <> 'c'.
          this performs only string-based comparisons.

        exists "file path"\:
          test if file exists.
          for example, "if exists "a.txt" "b.txt" would test if both the file a.txt and b.txt exist.

        is block,character,directory,fifo,link,regular,socket "file path"\:
          test if file exist and is of the given type, comma separated options with one or more files.
          for example, "if is regular,directory "a.txt" "b.txt" would test if both the file a.txt and b.txt exist and are either of type "regular" or type "directory".

        fail\:
          test if the previous section operation failed.

        succeed\:
          test if the previous section operation succeeded.

        mode is/has "some mode" "some file"\:
          test if one or more files has the exact mode ("is") or has at least the given modes ("has").
          for example, "if mode is u+r a.txt b.txt" would test if both file a.txt and b.txt only have owner set to read.
          for example, "if mode has u+r a.txt b.txt" would test if both file a.txt and b.txt has owner set to read, and all other modes can be anything.

        owner "some mode" "some file"\:
          test if one or more files has the given owner.
          for example, "if owner me a.txt b.txt" would test if both file a.txt and b.txt have an owner named "me".

        group "some mode" "some file"\:
          for example, "if owner we a.txt b.txt" would test if both file a.txt and b.txt have a group named "we".

        defined parameter/environment "some define name"\:
          test if one or more names are defined as a "parameter" or an "environment" variable.
          for example, "if defined parameter verbose silent" would test if both the "verbose" and the "silent" variables are defined via the "parameter" setting.
          for example, "if defined environment PWD SHELL" would test if both the "PWD" and the "SHELL" variables are defined via the "environment" variables.

    - link\:
      Create a symbolic link from some point to some target.

      The first Content represents the target file.
      The second Content represents the point file.

    - mode\:
      Change the mode permissions for a given file.

      The first Content represents the mode to assign.
      The second Content represents the file to assign the mode to.

    - modes\:
      Identical to mode operation, except this will recursively apply the mode to all files within the given file, if that file is a directory file path.

    - operate\:
      Begin execution of another Section.

      The first Content represents the name of the Section Object to execute.
      This may be neither the "settings" Section no the "main" Section.
      Recursion is prohibited, a Section that is already on the operation stack may not be called again.
      Once the operation is off the stack, it can then be called again.

    - owner\:
      Change the owner role for a given file.

      The first Content represents the role to assign.
      The second Content represents the file to assign the role to.

    - owners\:
      Identical to owner operation, except this will recursively apply the mode to all files within the given file, if that file is a directory file path.

    - pop\:
      Pop a directory path of the path stack, thereby changing to the previous directory on the stack.
      This is a change directory command similar to a back button in a browser.

      This has no Content.

      This does not generate an error if the path stack is empty.
      If the directory popping to no longer exists, then an error occurs.

    - print\:
      Print the content to the output screen.
      This always prints a newline.

      All Content is printed, and if no Content is provided, an empty line is printed.

    - run\:
      Manually execute a remote program or script.
      This program must be in the appropriate PATH environment or otherwise automatically detected when calling without a specific path to the program or script.

      The first Content represents the program or script name.
      All Content after the first are passed to the program or script when running.

      After this executes the return result is made available via the "return" parameter variable name.
      Any existing value associated with "return" gets replaced.

    - shell\:
      Manually execute a remote program or script using a specific path to the program or script.
      This does not require the program to exist in PATH, but the path to the program or script must be relative to the project path.
      @todo: consider relaxing this restriction on the relativeness of the path, possibly adding a configurable setting to allow enabling/disabling this restriction.

      The first Content represents the program or script name.
      All Content after the first are passed to the program or script when running.

      After this executes the return result is made available via the "return" parameter variable name.
      Any existing value associated with "return" gets replaced.

    - skeleton\:
      Run the fake skeleton operation as if "fake skeleton" was run instead of "fake make".
      Command line arguments are automatically passed to the fake skeleton operation.

    - to\:
      Change to the directory within the project root path tree, pushing the previous directory onto the path stack.
      The previous path is saved onto the path stack and may later be "popped" off.

      The first Content represents the path to change directory into.

    - top\:
      Change to the project root path, clearing the directory path stack.

      This has no Content.
      If the project root path no longer exists, then an error occurs.

    - touch\:
      Manually create a new file or a directory within the project root or update its last changed timestamp if the file already exists.

      The first Content must be either "file" or "directory".
      The remaining Content must be a path to the file.
