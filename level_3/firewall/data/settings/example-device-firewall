# fss-0002
# valid tool: iptables, ip6tables, ip46tables (ip46tables = both ip4 and ip6 tables, which is the default).
# valid direction: input, output, forward, postrouting, postrouting-output, postrouting-input, prerouting, prerouting-output, prerouting-input, none.
# valid device: all, this, (any device name goes here without parenthesis).
# valid action: append, insert, policy, none.
# valid procotol: none, (any valid iptables protocol type, such as tcp, udp, and icmp).
# some options for -j: ACCEPT, REJECT, DROP, RETURN, LOG, AUDIT, CHECKSUM, CLASSIFY, CLUSTERIP, CONNMARK, CONNSECMARK, CT, DNAT, DNPT, DSCP, ECN, HL, HMARK, IDLETIMER, LED, MARK, MASQUERADE, MIRROR, NETMAP, NFLOG, NFQUEUE, NOTRACK, RATETEST, REDIRECT, SAME, SECMARK, SET, SNAT, SNPT, TCPMSS,TCPOPTSTRIP, TEE, TOS, TPROXY, TRACE, TTL, ULOG.
# some options for -t: nat, mangle, filter, raw, security (filter is the default).
# some options for --state: NEW, ESTABLISHED, RELATED, INVALID, UNTRACKED, SNAT, DNAT.
# some options for --ctstatus: NONE, EXPECTED, SEEN_REPLY, ASSURED, CONFIRMED.

main:
  device this
  direction input

  # Define a blacklist and a whitelist, put ip addresses in the file named 'example-device-whitelist' separated by whitespace to whitelist an ip address
  # (ip_list might be removed in the future once I figure out how ipset works and confirm if ipset can replace my ip_list.)
  #ip_list source example-device-whitelist -j ACCEPT
  #ip_list source example-device-blacklist -j REJECT
  #ip_list destination example-device-whitelist -j ACCEPT
  #ip_list destination example-device-blacklist -j REJECT

  # Connection marking for vlans or QoS (via: tc).
  #direction prerouting
  #rule -t mangle -j CONNMARK --restore-mark
  #direction input

  # save markings that have been restored (prerouting).
  #direction prerouting
  #rule -t mangle -m mark --mark 2 -j CONNMARK --save-mark
  #rule -t mangle -m mark --mark 3 -j CONNMARK --save-mark
  #direction input

  # example rate limit using marking for port 22
  #protocol tcp
  #direction output
  #rule -t mangle --sport 22 -j MARK --set-mark 2
  #direction input
  #rule -t mangle --dport 22 -j MARK --set-mark 2

  # rate limit when there are 8 or more connections from a single host.
  #protocol tcp
  #direction output
  #rule -t mangle -m connlimit --connlimit-above 7 -j MARK --set-mark 3
  #direction input
  #rule -t mangle -m connlimit --connlimit-above 7 -j MARK --set-mark 3

  # save markings that have been assigned (postrouting).
  #protocol none
  #direction postrouting
  #rule -t mangle -m mark --mark 2 -j CONNMARK --save-mark
  #rule -t mangle -m mark --mark 3 -j CONNMARK --save-mark
  #direction input


  # randomly trigger the rule (51% of the time) and then the reset of the time go to the second rule.
  # this can be very useful in distributing connections between different devices or servers.
  #rule -m random --average 51 -j example_rule_1
  #rule -j example_rule_2


input-tcp:
  device this
  direction input
  protocol tcp

  ## Http / Web
  #rule --dport 80 -m state --state NEW -j LOG --log-prefix "TRAFFIC:WEB "
  #rule --dport 80 -m state --state NEW -j ACCEPT

  ## Http / Web redirect to Https / Secure Web
  #tool iptables
  #direction prerouting-input
  #rule -t nat --dport 80 -m state --state NEW -j REDIRECT --to-port 443
  #tool ip46tables
  #direction input

  ## Https / Secure Web
  #rule --dport 443 -m state --state NEW -j LOG --log-prefix "TRAFFIC:WEB "
  #rule --dport 443 -m state --state NEW -j ACCEPT

  ## Http / Https / Web throttle connections that occur too often.
  #rule --dport 80 --sync -m recent --name http_throttle --set
  #rule --dport 80 --sync -m recent --name http_throttle --update --seconds 3 --hitcount 10 -j DROP
  #rule --dport 443 --sync -m recent --name http_throttle --set
  #rule --dport 443 --sync -m recent --name http_throttle --update --seconds 3 --hitcount 10 -j DROP

  ## MySQL
  #rule --dport 3306 -m state --state NEW -j ACCEPT

  ## Music Player Daemon
  #rule --dport 6600 -m state --state NEW -j ACCEPT

  ## Camsource
  #rule --dport 9192 -m state --state NEW -j ACCEPT

  ## Cups Printer Administration
  #rule --dport 631 -m state --state NEW -j ACCEPT

  ## Ssh (OpenSSH)
  #rule --dport 22 -m state --state NEW -j LOG --log-prefix "TRAFFIC:SSH "
  #rule --dport 22 -m state --state NEW -j ACCEPT

  ## clamd (Clam Antivirus) - remote access, not needed for normal
  #rule --dport 3310 -m state --state NEW -j ACCEPT

  ## Virtual Network Client Server (add 1 for each seperat vnc server)
  #rule --dport 5900 -m state --state NEW -j ACCEPT

  ## Printer Port, is probably open...safer to close unless you are SERVING a printer
  #rule --dport 515 -m state --state NEW -j REJECT

  ## Subversion server
  #rule --dport 3690 -m state --state NEW -j ACCEPT

  ## Silc server
  #rule --dport 706 -m state --state NEW -j ACCEPT

  ## Worms of Prey
  #rule --dport 47288 -m state --state NEW -j ACCEPT

  ## Git Daemon
  #rule --dport 9418 -m state --state NEW -j ACCEPT

  ## Ldap Server
  #rule --dport 389 -j ACCEPT
  #rule --dport 636 -j ACCEPT
  #rule --dport 1636 -j ACCEPT

  ## Mail Server (25 = SMTP, 465 = SMTPS, 993 = IMAP, 995 = POP)
  #rule --dport 25 -j ACCEPT


input-udp:
  device this
  direction input
  protocol udp

  ## DNS Server (Bind or Maradns) (zoneserver from maradns does this portion)
  #rule --dport 53 -m state --state NEW -j ACCEPT

  ## DHCP Server
  #rule -m state --state NEW --dport 67 --sport 68 -j ACCEPT
  #rule -m state --state NEW --dport 68 --sport 67 -j ACCEPT

  ## Subversion server
  #rule --dport 3690 -m state --state NEW -j ACCEPT

  ## Worms of Prey
  #rule --sport 47288:47544 -m state --state NEW -j ACCEPT
  #rule --dport 47288:47544 -m state --state NEW -j ACCEPT


input-icmp:
  device this
  direction input
  protocol icmp

  # allow all icmp input, such as pings
  #rule -m state --state NEW -j ACCEPT

  # allow icmp: echo reply (outbound ping)
  ##rule --icmp-type 0 -m state --state NEW -j ACCEPT

  # allow icmp: destination unreachable
  #rule --icmp-type 3 -m state --state NEW -j ACCEPT

  # allow icmp: source quench
  #rule --icmp-type 4 -m state --state NEW -j ACCEPT

  # allow icmp: redirect
  #rule --icmp-type 5 -m state --state NEW -j ACCEPT

  # allow icmp: echo request (inbound ping)
  #rule --icmp-type 8 -m state --state NEW -j ACCEPT

  # allow icmp: router advertisement
  #rule --icmp-type 9 -m state --state NEW -j ACCEPT

  # allow icmp: router Solicitation
  #rule --icmp-type 10 -m state --state NEW -j ACCEPT

  # allow icmp: time exceeded
  #rule --icmp-type 11 -m state --state NEW -j ACCEPT

  # allow icmp: bad ip header
  #rule --icmp-type 12 -m state --state NEW -j ACCEPT

  # allow icmp: timestamp
  #rule --icmp-type 13 -m state --state NEW -j ACCEPT

  # allow icmp: timestamp reply
  #rule --icmp-type 14 -m state --state NEW -j ACCEPT

  # allow icmp: information request
  #rule --icmp-type 15 -m state --state NEW -j ACCEPT

  # allow icmp: information reply
  #rule --icmp-type 16 -m state --state NEW -j ACCEPT

  # allow icmp: address request
  #rule --icmp-type 17 -m state --state NEW -j ACCEPT

  # allow icmp: address reply
  #rule --icmp-type 18 -m state --state NEW -j ACCEPT

  # allow icmp: traceroute
  #rule --icmp-type 30 -m state --state NEW -j ACCEPT


output-tcp:
  device this
  direction output
  protocol tcp


output-udp:
  device this
  direction output
  protocol udp

  ## DNS Server (Bind or Maradns) (zoneserver from maradns does this portion)
  #rule --dport 53 -m state --state NEW -j ACCEPT

  ## DHCP Server
  #rule -m state --state NEW --dport 67 --sport 68 -j ACCEPT


output-icmp:
  device this
  direction output
  protocol icmp


