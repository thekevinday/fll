.TH controller-rule "5" "January 2023" "Controller 0.7.0" "File Formats"
.SH NAME
Controller \- "rule" file.
.SH SYNOPSIS
.B rule
.SH DESCRIPTION
.PP
Describes how a packet is designed and intended to be used.

The \fBpacket\fR is the general category in which multiple types of packets belong.
This describes the different packets based on their \fBtype\fR.

Each packet begins with a control block and a size block followed by a payload block.

  The control block:
    The leading bit (starting from the left) designates the the format of the payload, which is 0 for string and 1 for binary.
    The second bit (starting from the left) designates the the byte order for the rest of the packet, which 0 is for little endian and 1 is for big endian.
    The remaining 6\-bits are reserved for future use.

  The size block:
    The size block represents the size of the entire packet (the control block, the size blocks, and the payload block).
    This number is a single 32\-bit unsigned integer.

    Example packet structure:

      [ Control Block ] [ Size Block                                  ] [ Payload Block         ]
      [ 0b10000000    ] [ 0b00000000 0b00000000 0b00000100 0b11010010 ] [ size: 1229 (1234 \- 5) ]


  The payload block:
    This block is represented by the \fBFSS\-000E (Payload)\fR specification and its structure ad use is described in the next sections.

    The following types of payload are received or sent:
    1) controller payload.
    2) error payload.
    3) init payload.

The controller payload:
  Commands being sent to the controller and their respective responses utilize a \fBcontroller\fR payload.
  These are pre\-defined commands to rules or the controller program itself.
  Commands such as starting or stopping some rule, for example.
  A controller payload is also sent in response to a controller payload request to represent a success.

    The \fBnow\fR condition designates that the kexec, reboot, or shutdown is to begin immediately.
    The \fBat\fR condition designates that the kexec, reboot, or shutdown is to begin once a specific date and time is reached by the system clock.
    The \fBin\fR condition designates that the kexec, reboot, or shutdown is to begin once a specific amount of time is passed by the system clock since the execution of this command started.

  For these \fBtime\fR conditions, different units of time should be supported, such as \fBseconds\fR, \fBdays\fR, \fByears\fR as standard time, Time, or UNIX Time (Epoch Time).

  The normal \fBcontroller\fR payload commands are any valid Rule Action that performs some action.
  This does not include Actions that provide some setting or configuration (such as \fBwith_pid\fR).
  Some of the supported commands are: \fBfreeze\fR, \fBkill\fR, \fBpause\fR, \fBreload\fR, \fBrerun\fR, \fBrestart\fR, \fBresume\fR, \fBstart\fR, \fBstop\fR, or \fBthaw\fR.
  Multiple commands may be sent multiple \fBaction\fR headers.
  The \fBaction\fR headers are order sensitive, executing from top to bottom, and one does not start until the previous successfully completes.

  Multiple \fBstatus\fR headers may exist in the response so long as they each match an \fBaction\fR in the request.

  The \fBpayload\fR is expected to be empty and have a length of 0 for a request.
  The \fBpayload\fR may have an \fBFSS\-0000 (Basic)\fR format containing a single Object \fBmessage\fR to represent a message associated with an action.
  Multiple \fBmessage\fR may exist in the response so long as they each match an \fBaction\fR in the request.

The error payload:
  The error payload is intended to communicate some sort of failure.
  The error payload is only sent in response to some request (and not in response to another response).
  The control (the client) is not expected to send error payloads and the controller (the service) should send an error in response to an error payload or ignore it entirely.
  The \fBstatus\fR from the \fBheader\fR designates the status code as either a status code name string or a status code number (where a number may have error and warning bits).
  The \fBpayload\fR will contain a NULL terminated string representing the message used to describe the error.

The init payload:
  The init payload is intended exclusively for the \fBinit\fR operation mode and is expected to only be available when running as \fBinit\fR.
  This is used to provide special actions, namely \fBkexec\fR, \fBreboot\fR, and \fBshutdown\fR.

  The \fBkexec\fR is for booting into another kernel, which may effectively be the same as a \fBreboot\fR ("kexec" is currently neither supported nor implemented).
  The \fBreboot\fR is for rebooting the machine (currently not implemented).
  The \fBshutdown\fR is for shutting down the machine (currently not implemented).
  These three commands are configurable to fire off based on conditions.
.SH SPECIFICATION
.PP
The controller program communicates use the \fBFSS\-000F (Packet)\fR.
This specification declares how the Payload Block, which is in \fBFSS\-000E (Payload)\fR format, is required to be used.

Only a single \fBheader\fR is allowed.
Only a single \fBpayload\fR is allowed.

Packet Structure:
  Packet is grouped into the following blocks:
    \- \fBcontrol\fR: A single 1\-byte block representing control codes.
    \- \fBsize\fR: A single 4\-byte block representing the size of the entire packet, including the control block.

The \fBheader\fR Object contains the following \fBFSS\-0001 (Extended)\fR Objects (depending on \fBtype\fR):
  \- \fBaction\fR: A valid action type: \fBfreeze\fR, \fBkexec\fR, \fBkill\fR, \fBpause\fR, \fBreboot\fR, \fBreload\fR, \fBrerun\fR, \fBrestart\fR, \fBresume\fR, \fBshutdown\fR, \fBstart\fR, \fBstop\fR, or \fBthaw\fR.
  \- \fBlength\fR: A positive whole number inclusively between 0 and 4294965248 representing the length of the \fBpayload\fR (may be in binary, octal, decimal, duodecimal, or hexidecimal).
  \- \fBstatus\fR: The status code name or number representing an FSS status code, such as F_okay, F_failure, or 200 (where a number may have error and warning bits and may be in binary, octal, decimal, duodecimal, or hexidecimal).
  \- \fBtype\fR: The packet type that is one of \fBcontroller\fR, \fBerror\fR, or \fBinit\fR.

When there are multiple Objects of the same name inside the \fBheader\fR:
  \- \fBaction\fR: The order represents the order in which the actions are performed.
  \- \fBlength\fR: There may only be one length Object, all others after the first are ignored (may be in binary, octal, decimal, duodecimal, or hexidecimal).
  \- \fBstatus\fR: A status for each action, in the same order as the order of the action, such as F_okay, F_failure, or 200 (where a number may have error and warning bits and may be in binary, octal, decimal, duodecimal, or hexidecimal).
  \- \fBtype\fR: The first represent the type and all others represents a sub\-type.

There are different headers and payload properties based on the \fBtype\fR.

The \fBcontroller\fR type:
  Supports the following headers: \fBaction\fR, \fBlength\fR, \fBstatus\fR, and \fBtype\fR.

  Only a single \fBaction\fR may be provided and must exist for request and response packets.
  Only a single \fBstatus\fR may be provided and must exist for response packets.

  The \fBpayload\fR is dependent on the \fBaction\fR.

The \fBerror\fR type:
  Supports the following headers: \fBlength\fR, \fBstatus\fR, and \fBtype\fR.

  Only a single \fBstatus\fR may be provided and must exist for request and response packets.

  The \fBpayload\fR is a NULL terminated string whose length is defined by the \fBlength\fR \fBheader\fR Content.

There are different headers and payload properties based on the \fBtype\fR.

The \fBinit\fR type:
  Supports the following headers: \fBaction\fR, \fBlength\fR, \fBstatus\fR, and \fBtype\fR.

  Only a single \fBaction\fR may be provided and must exist for request and response packets.
  Only a single \fBstatus\fR may be provided and must exist for response packets.

  The \fBpayload\fR is dependent on the \fBaction\fR.
.SH SEE ALSO
.PP
\fBcontrol\fR(1),
\fBcontroller\fR(1),
\fBcontroller\-actions\fR(5),
\fBcontroller\-entry\fR(5),
\fBcontroller\-exit\fR(5),
\fBcontroller\-rule\fR(5)
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, Open Standard License 1.0 or later.
