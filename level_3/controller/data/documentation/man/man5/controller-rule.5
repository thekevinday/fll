.TH controller-rule "5" "January 2023" "Controller 0.6.4" "File Formats"
.SH NAME
Controller \- "rule" file.
.SH SYNOPSIS
.B rule
.SH DESCRIPTION
.PP
This describes the intent and purpose of a Rule file.

A Rule file, such as \fBssh.rule\fR, is intended to designate what to execute.

The rule file is read top\-down, except for the outer most list \fBsettings\fR, which is intended to store setting data for this rule.
Multiple outer most list Objects may be specified and they are executed as provided, in a top\-down manner.

\- The \fBsettings\fR Rule Type has the following \fBFSS\-0001 (Extended)\fR Content:
  \- \fBaffinity\fR: Define one or more processors to restrict this rule by with each number representing a specific processor by its id (starting at 0).
  \- \fBcapability\fR: Define a set of capabilities in which to use, using the capability \fBtext\fR format (such as \fB= cap_chown+ep\fR).
  \- \fBcgroup\fR: Define a cgroup (control group) in which everything within this rule executes under.
  \- \fBdefine\fR: A single environment variable name and its associated value that is automatically exposed to processes executed within this rule.
  \- \fBengine\fR: An executable name of a script, such as \fBbash\fR, to use for the \fBscript\fR Rule Type (which likely defaults to \fBbash\fR if not specified).
  \- \fBenvironment\fR: A set of environment variables to expose to the processes executed within this rule (PATH is always exposed).
  \- \fBgroup\fR: A set of group names or IDs to execute as with the first group being the primary group and all remaining being supplementary groups.
  \- \fBlimit\fR: Define a resource limit to use (multiple limits may be specified, but only once for each type).
  \- \fBname\fR: A name used to represent this rule, which is printed to the user, screen, logs, etc...
  \- \fBnice\fR: A single niceness value to run all processes executed within this rule as (\-20 gets to be greediest in CPU usage and 19 being the nicest in CPU usage).
  \- \fBon\fR: Define a Rule Action in which a specified dependency is needed, wanted, or wished for.
  \- \fBparameter\fR: An IKI name and its associated value for use in this rule file.
  \- \fBpath\fR: A single Content used to set a custom PATH environment variable value.
  \- \fBscheduler\fR: A valid name of a scheduler to use followed by an optional priority number.
  \- \fBtimeout\fR: A set of timeouts to wait for in which to perform a set action or to consider failure.
  \- \fBuser\fR: A single user name or ID to execute as.

\- The \fBcapability\fR setting:
  If the user the controller program is run as does not have the desired capabilities already, they cannot be added.
  This essentially maintains or reduces the capabilities already available.
  Due to capabilities only being a draft in the POSIX standard, one may expect \fBcapabilities\fR support may not be available and in such a case this setting will do nothing.
  If the dependent project (f_capability) does not have libcap support enabled, then capabilities will be unsupported by the compilation of this project.

\- The \fBcontrol\fR setting:
  The first argument is either \fBexisting\fR or \fBnew\fR, where for \fBexisting\fR the process is run inside the existing control used by the parent and when \fBnew\fR the process is executed within a new control group namespace entirely.

\- The \fBdefine\fR setting:
  Use this to define an environment variable (this overwrites any existing environment variable with this name).
  A define is both exported as an environment variable as well as exposed as an IKI variable.
  Example IKI variable substitution: for \fBdefine PATH /bin:/sbin\fR, the associated IKI variable would look like: PATH.

  All environment variables, including those defined using this, must be in the \fBenvironment\fR list to be exported to the executed process.
  Environment variables added here that are not added to the environment are still exposed as an IKI variable.

\- The \fBengine\fR setting:
  This engine is used for both \fBscript\fR and \fButility\fR Rule Types.
  The program that engine refers to must accept a standard input pipe to be supported.
  Additional parameters may be passed to the engine.

\- The \fBgroup\fR and \fBuser\fR settings:
  Only users and groups that the user the controller program is being run as is allowed to use may be used.

\- The \fBlimit\fR setting:
  The first parameter must be one of: \fBas\fR, \fBcore\fR, \fBcpu\fR, \fBdata\fR, \fBfsize\fR, \fBlocks\fR, \fBmemlock\fR, \fBmsgqueue\fR, \fBnice\fR, \fBnofile\fR, \fBnproc\fR, \fBrss\fR, \fBrtprio\fR, \fBrttime\fR, \fBsigpending\fR, or \fBstack\fR.
  The second parameter represents the soft limit.
  The third parameter represents the hard limit.
  This may be specified multiply times, but only once for each type.

\- The \fBon\fR setting:
  The first parameter represents the Action the dependency exists under and must be one of: \fBfreeze\fR, \fBkill\fR, \fBpause\fR, \fBreload\fR, \fBrestart\fR, \fBresume\fR, \fBstart\fR, \fBstop\fR, or \fBthaw\fR.
  The second parameter represents how the dependency is required and must be one of: \fBneed\fR, \fBwant\fR, or \fBwish\fR.
  The third parameter is a partial path to the rule file.
  The fourth parameter represents the name of the rule file.

  \- In the case of the second parameter:
    \- A \fBneed\fR designates that the dependent rule is required to be executed (must exist and must succeed).
    \- A \fBwant\fR designates that the dependent rule is to be executed (may exist and if it does, then it must succeed).
    \- A \fBwish\fR designates that the dependent rule is to be executed (may exist and if it does, but it does not need to succeed).

    In the case of \fBwant\fR and \fBwish\fR, if the desired rule is either not found or is otherwise disabled, then this will not fail or otherwise block the wanting or wishing rule.

\- The \fBpath\fR setting:
  When specified, the \fBPATH\fR environment variable is automatically added to the \fBenvironment\fR setting.

\- The \fBparameter\fR setting:
  Use this to define an IKI variable name and value.
  These do not conflict with environment variables and are not exposed as environment variables.
  Example IKI variable substitution: for \fBparameter hello world\fR, the associated IKI variable would look like: hello.

\- The \fBscheduler\fR setting:
  The valid range of the priority number is dependent on the scheduler.
  For example, non\-real\-time schedulers (such as \fBidle\fR) only support a value of 0 whereas real\-time schedulers (such as \fBfifo\fR) only support an inclusive range of 1 to 99.
  Supported non\-real\-time schedulers are: \fBbatch\fR, \fBidle\fR, and \fBother\fR (aka: normal/default).
  Supported real\-time schedulers are: \fBdeadline\fR, \fBfifo\fR, \fBround_robin\fR.

\- The \fBtimeout\fR setting:
  (This is not currently implemented.)
  Provides settings for each of the three special situations: \fBkill\fR, \fBstart\fR, and \fBstop\fR.
  Each of these may only have a single one exist at a time (one \fBkill\fR, one \fBstart\fR, and one \fBstop\fR).
  Each successive \fBtimeout\fR Item Action, specific to each Action Name (such as \fBstart\fR), specified replaces the previously defined \fBtimeout\fR Action (in a top\-down manner).
  The second Content for each of these, when specified, may be a 0 or greater whole number representing the number of MegaTime (MT) (equivalent to milliseconds).
  For \fBkill\fR, this represents the number of MegaTime to wait after stopping some Rule and that Rule has not yet stopped to forcefully stop the Rule (aka kill the Rule).
  For \fBstart\fR, this represents the number of MegaTime to wait after starting some Rule before assuming something went wrong and the Rule is returned as failed.
  For \fBstop\fR, this represents the number of MegaTime to wait after stopping some Rule before assuming something went wrong and the Rule is returned as failed.
  If the second Content is not specified, then this disables the type (prevents the specified timeout action).

There are four available Rule Types to choose from: \fBcommand\fR, \fBservice\fR, \fBscript\fR, and \fButility\fR.

The \fBcommand\fR Rule Type provides a simple command to run under the different circumstances: \fBstart\fR, \fBstop\fR, \fBrestart\fR, and \fBreload\fR.
A \fBcommand\fR always operates in the foreground.

The \fBservice\fR Rule Type provides a \fBcommand\fR accompanied with a PID file (Process Identifier file).

The \fBscript\fR Rule Type provides a series of lines to be executed by some engine, such as GNU Bash.
This \fBscript\fR operates in the foreground, but individual things done within the script may operate in foreground or background.
The last return state is treated as an error, so be sure to finish the script with a return code of 0 to designate no error and any other whole number, such a 1, to designate an error.
Therefore passing \fBexit 1\fR would return as an error and passing \fBexit 0\fR would return as a success.
A \fBscript\fR is assumed to be in GNU Bash, which is the default expected behavior, but the specification does not explicitly require this.
Another scripting language can be used but changing this incurs the responsibility to ensure all rules are updated to the appropriate scripting language.

The \fButility\fR Rule Type provides a \fBscript\fR accompanied with a PID file (Process Identifier file).

There are nine Rule Actions used to execute ("freeze", \fBkill\fR, \fBpause\fR, \fBreload\fR, \fBrestart\fR, \fBresume\fR, \fBstart\fR, \fBstop\fR, and \fBthaw\fR):
  When \fBrestart\fR Object's Content is not provided, then \fBstart\fR and \fBstop\fR is called when the rule is executed using the restart Action, if both \fBstart\fR and \fBstop\fR are provided.
  When \fBreload\fR, \fBstart\fR, or \fBstop\fR Object's Content are not provided, then no respective Action is performed.

  Commands are conditionally available depending on the presence of these, such as if \fBstop\fR is not provided then \fBstop\fR (and \fBrestart\fR) will not be available for the \fBcontrol\fR program(s) to use.

Thee are additional Rule Actions not used to execute ("pid_file", \fBrerun\fR, and \fBwith\fR):
  \- The \fBpid_file\fR Object's Content designates the path to the PID file created by the called program.

  \- The \fBrerun\fR Object's Content designates how to re\-run a given execution Rule type.
    \- The first Content represents the execution type, which may be one of: \fBfreeze\fR, \fBkill\fR, \fBpause\fR, \fBreload\fR, \fBrestart\fR, \fBresume\fR, \fBstart\fR, \fBstop\fR, and \fBthaw\fR.

    \- The second Content represents when to run this re\-run is triggered, which is either \fBsuccess\fR (return code of 0) or \fBfailure\fR (return code is not 0).

    \- The third Content and more represent additional options for fine tuning how the re\-run is Performed:
      When \fBdelay\fR, followed by a number of MegaTime (MT) (equivalent to milliseconds) in which to wait before attempting the re\-run.
      When \fBmax\fR, followed by a positive number or the number 0 designating the maximum number of re\-runs to perform.
      When \fBreset\fR, the \fBmax\fR re\-run counter is reset for the opposite re\-run when this re\-run is triggered, such as:
        A \fBrerun start success reset\fR and a \fBrerun failure max 10\fR, the failure counter would reset to 0 when the \fBsuccess\fR re\-run is performed and not when the \fBfailure\fR re\-run is performed.

      A \fBmax\fR of 0 designates that the re\-run will happen infinitely.

  \- The \fBwith\fR Object's Content designates special flags designating very specific behavior to be applied to any single Rule Type.
.SH SPECIFICATION
.PP
The Rule files follow the \fBFSS\-000D (Basic Rule)\fR format with IKI\-0000 (Unrestricted).

A Rule file name is expected to have the file extension \fB.rule\fR.

For each Rule file:
  \- The outer most part is a \fBFSS\-0002 (Basic List)\fR.
  \- The Basic List Object is considered the \fBRule Type\fR.
  \- The Basic List Content is determined by the specific \fBRule Type\fR.
  \- The Content for each \fBRule Type\fR is called the \fBItem\fR.
  \- Each Item Object is the \fBItem Name\fR.
  \- Each Item Content is either the \fBAction\fR or the \fBSetting\fR.
  \- Each Action Object is the \fBAction Name\fR.
  \- Each Action Content are the \fBAction Parameters\fR.
  \- Each Setting Object is the \fBSetting Name\fR.
  \- Each Setting Content are the \fBSetting Values\fR.

The Rule Types:
  \- \fBcommand\fR: Follows either \fBFSS\-0003 (Extended List)\fR or \fBFSS\-0001 (Extended)\fR.
  \- \fBscript\fR: Follows either \fBFSS\-0003 (Extended List)\fR or \fBFSS\-0001 (Extended)\fR.
  \- \fBservice\fR: Follows either \fBFSS\-0003 (Extended List)\fR or \fBFSS\-0001 (Extended)\fR.
  \- \fBsettings\fR: Is required and follows either  \fBFSS\-0001 (Extended)\fR.
  \- \fButility\fR: Follows either \fBFSS\-0003 (Extended List)\fR or \fBFSS\-0001 (Extended)\fR.

For the above Rule Types, \fBsettings\fR may be specified only once whereas the others may be specifed multiple times.
The \fBsettings\fR Rule Type is always processed first, regardless of position.
The other Rule Types are processed top\-down.

The \fBsettings\fR Rule Type has the following \fBFSS\-0001 (Extended)\fR:
  \- \fBaffinity\fR: One or more Content, each must be a 0 or greater whole number.
  \- \fBcapability\fR: One Content representing capabilities.
  \- \fBcgroup\fR: Two or more Content, the first Content being either \fBexisting\fR or \fBnew\fR and the remaining representing a valid cgroup (control group) name, must have at least 1 graph character (non white space printing character) (leading and trailing white space are trimmed off).
  \- \fBdefine\fR: Two Content, the first Content must be a case\-sensitive valid environment variable name (alpha\-numeric or underscore, but no leading digits).
  \- \fBengine\fR: One or more Content representing a valid program name or path (such as \fBbash\fR or \fB/bin/bash\fR) and any optional arguments.
  \- \fBenvironment\fR: Zero or more Content, each must be a case\-sensitive valid environment variable name (alpha\-numeric or underscore, but no leading digits).
  \- \fBgroup\fR: One or more Content representing group names or group ids.
  \- \fBlimit\fR: Three Content, with the first representing a valid resource type and the second and third being a valid resource limit number (positive whole number or 0).
  \- \fBname\fR: One Content, must have at least 1 graph character (non white space printing character) (leading and trailing white space are trimmed off).
  \- \fBnice\fR: One Content, must be a valid number for process \fBniceness\fR (Any whole number inclusively between \-20 to 19).
  \- \fBon\fR: Four Content, the first being a Rule Action, the second being \fBneed\fR, \fBwant\fR, or \fBwish\fR, the third being a partial path, and the fourth being a Rule file name without \fB.rule\fR extension.
  \- \fBparameter\fR: Two Content, the first Content must be a case\-sensitive valid IKI name and the second being an IKI value.
  \- \fBpath\fR: One Content representing a valid \fBPATH\fR environment string (such as \fB/bin:/sbin:/usr/bin\fR).
  \- \fBscheduler\fR: One or two Content representing a scheduler name and the optional numeric priority (Any whole number inclusively between 0 and 99).
  \- \fBtimeout\fR: One or two content with the first being one of \fBexit\fR, \fBstart\fR, \fBstop\fR, or \fBkill\fR and the (optional) second Content being a positive whole number or 0.
  \- \fBuser\fR: One Content representing a user name or user id.

The \fBcommand\fR and \fBscript\fR Rule Types allow the following the \fBFSS\-0001 (Extended)\fR:
  \- \fBfreeze\fR: One or more Content representing a program being executed and its arguments.
  \- \fBkill\fR: One or more Content representing a program being executed and its arguments.
  \- \fBpause\fR: One or more Content representing a program being executed and its arguments.
  \- \fBreload\fR: One or more Content representing a program being executed and its arguments.
  \- \fBrerun\fR: Two or more Content representing a Rule type that executes and its properties.
  \- \fBrestart\fR: One or more Content representing a program being executed and its arguments.
  \- \fBresume\fR: One or more Content representing a program being executed and its arguments.
  \- \fBstart\fR: One or more Content representing a program being executed and its arguments.
  \- \fBstop\fR: One or more Content representing a program being executed and its arguments.
  \- \fBthaw\fR: One or more Content representing a program being executed and its arguments.
  \- \fBwith\fR: One or more Content representing special options for the Rule Type.

The \fBservice\fR and \fButility\fR Rule Types allow the following the \fBFSS\-0001 (Extended)\fR:
  \- \fBpid_file\fR: One Content representing the path to a PID file.
  \- \fBrerun\fR: Two or more Content representing a Rule type that executes and its properties.
  \- \fBwith\fR: One or more Content being one of \fBfull_path\fR, \fBsession_new\fR, or \fBsession_same\fR.

The \fBcommand\fR and \fBservice\fR Rule Types allow the following the \fBFSS\-0003 (Extended List)\fR:
  \- \fBfreeze\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBkill\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBpause\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBreload\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBrestart\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBresume\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBstart\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBstop\fR: A list repesenting multiple programs and their respective arguments to execute.
  \- \fBthaw\fR: A list repesenting multiple programs and their respective arguments to execute.

The \fBscript\fR and \fButility\fR Rule Types allow the following the \fBFSS\-0003 (Extended List)\fR:
  \- \fBfreeze\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBkill\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBpause\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBreload\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBrestart\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBresume\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBstart\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBstop\fR: A list repesenting the contents of a script, such as a GNU Bash shell.
  \- \fBthaw\fR: A list repesenting the contents of a script, such as a GNU Bash shell.

The \fBrerun\fR Rule Type Content has the following structure:
  The first Content represents one of: \fBfreeze\fR, \fBkill\fR, \fBpause\fR, \fBreload\fR, \fBrestart\fR, \fBresume\fR, \fBstart\fR, \fBstop\fR, or \fBthaw\fR.
  The second Content represents one of: \fBsuccess\fR or \fBfailure\fR.
  The third and more Content represents one of: \fBdelay\fR, \fBmax\fR, or \fBreset\fR.
  Where \fBdelay\fR and \fBmax\fR must be followed by a positive number or the number 0.
.SH SEE ALSO
.PP
\fBcontrol\fR(1),
\fBcontroller\fR(1),
\fBcontroller\-actions\fR(5),
\fBcontroller\-entry\fR(5),
\fBcontroller\-exit\fR(5),
\fBcontroller\-packet\fR(5)
.SH AUTHOR
Written by Kevin Day.
.SH COPYRIGHT
.PP
Copyright \(co 2007-2023 Kevin Day, Open Standard License 1.0 or later.
