# fss-0002

Rule Documentation:
  This describes the intent and purpose of the rule file settings.

  A rule file, such as "ssh.rule", is intended to designate what to execute.

  The rule file is read top-down, except for the outer most list "settings", which is intended to store settings data for this rule.
  Multiple outer most list Objects may be specified and they are executed as provided, in a top-down manner.

  The "settings" Rule Type has the following FSS-0001 (Extended) Content\:
    "capability": Define a set of capabilities in which to use, using the capability "text" format (such as "= cap_chown+ep").
    "control": Define a control group (cgroup) in which everything within this rule executes under.
    "define": Define a custom environment variable with a given variable, and automatically expose it to processes executed within this rule.
    "environment": A set of environment variables to expose to the processes executed within this rule (PATH is always exposed).
    "group": A set of group names or IDs to execute as with the first group being the primary group and all remaining being supplementary groups.
    "name": A name used to represent this rule, which is printed to the user, screen, logs, etc...
    "need": A single rule required to be executed (must exist and must succeed) before this rule starts.
    "nice": A single niceness value to run all processes executed within this rule as (-20 gets to be greediest in CPU usage and 19 being the nicest in CPU usage).
    "parameter": A statically defined IKI name and its associated value for use in this rule file.
    "path": A single Content used to set a custom PATH environment variable value.
    "script": An executable name of a script, such as "bash", to use for the "script" Rule Type (which likely defaults to "bash" if not specified).
    "scheduler": A valid name of a scheduler to use.
    "user": A single user name or ID to execute as.
    "want": A single rule desired to be executed (may exist and must succeed) before this rule starts.
    "wish": A single rule desired to be executed (may exist and is not required to succeed) before this rule starts.

  In the case of "capability", if the user the controller program is run as does not have the desired capabilities already, they cannot be added.
  This essentially maintains or reduces the capabilities already available.
  Due to capabilities only being a draft in the POSIX standard, one may expect "capabilities" support may not be available and in such a case this setting will do nothing.
  If the dependent project (f_capability) does not have libcap support enabled, then capabilities will be unsupported by the compilation of this project.

  In the case of "group" and "user", only users and groups that the user the controller program is being run as may be used.

  In the case of "want" and "wish", if the desired rule is either not found or is otherwise disabled, then this will not fail or otherwise block the wanting or wishing rule.

  In the case of "path", when specified, the PATH environment variable is automatically added to the "environment" setting.

  In the case of "parameter", IKI variables are expanded in a pre-process manner and will be removed prior to any execution.
  Any IKI variables referencing an undefined parameter will be fully removed.
  These parameters are only exposed in the specific rule file in which they are defined and cannot be shared between rules.
  A "parameter" variable and an "environment" variable are mutually exclusive but an environment variable, in theory, can have an IKI variable assigned to it inside of a "script".
  These IKI variables are only substituted within a Rule Item's Content (and not within a Rule Setting nor within a Rule Item's Object).

  The "command" Rule Type provides a simple command to run under the different circumstances: "start", "stop", "restart", and "reload".
  A "command" always operates in the foreground.

  The "service" Rule Type provides a "command" accompanied with a PID file (Process Identifier file).
  Unlike the "command", a "service" always operates in the background.

  The "script" Rule Type provides a series of lines to be executed by a (Bash) script.
  This "script" operates in the foreground, but individual things done within the script may operate in foreground or background.
  The last return state is treated as an error, so be sure to finish the script with a return code of 0 to designate no error and any other whole number, such a 1, to designate an error.
  Therefore passing "exit 1" would return as an error and passing "exit 0" would return as a success.
  A "script" is assumed to be in GNU Bash, which is the default expected behavior, but the specification does not explicitly require this.
  Another scripting language can be used but changing this incurs the responsibility to ensure all rules are updated to the appropriate scripting language.

  There are five primary inner Content to perform: "kill", "restart", "reload", "start", and "stop".

  The "kill" Content is performed whenever this rule is executed using the kill action (which is, in general, a forced stop).
  The "start" Content is performed whenever this rule is executed using the start action.
  The "stop" Content is performed whenever this rule is executed using the stop action.
  The "restart" Content is performed whenever this rule is executed using the restart action.
  The "reload" Content is performed whenever this rule is executed using the reload action.

  When "restart" Content is not provided, then "start" and "stop" is called when the rule is executed using the restart action, if both "start" and "stop" are provided.
  When "reload", "start", or "stop" Content are not provided, then no respective action is performed.
  Commands are conditionally available depending on the presence of these, such as if "stop" is not provided then "stop" (and "restart") will not be available for the "control" program(s) to use.

  The "create" Content designates that this controller program to create the PID file after successfully starting the service.
  The "use" Content designates that the called program will provide the PID file after successfully starting the service.
  For both "create" and "program" the PID file is expected to only exist on success or failure and the existence thereof designates the success or failure rate.

  The following Content are the same as those specified in the Settings above except that they apply to a specific Rule Item instead of all Rule Items in the file\:
  - "capability"
  - "control"
  - "group"
  - "nice"
  - "scheduler"
  - "user"
